{
    "version": "https://jsonfeed.org/version/1",
    "title": "Luk's Blog • All posts by \"javase\" tag",
    "description": "",
    "home_page_url": "https://Meteora233.github.io",
    "items": [
        {
            "id": "https://meteora233.github.io/2023/07/14/computer-science/java/springboot/Day1/",
            "url": "https://meteora233.github.io/2023/07/14/computer-science/java/springboot/Day1/",
            "title": "SpringBoot",
            "date_published": "2023-07-13T16:00:00.000Z",
            "content_html": "<p>note info:<strong>查漏补缺</strong><br>第一天复习 课程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW04NHkxdzdUYj9wPTExOCZzcG1faWRfZnJvbT1wYWdlRHJpdmVyJnZkX3NvdXJjZT1lZTc2MGJmN2E0ZDg5ZDNlZTkyZjRmODNmM2E2ODJjOQ==\">SpringBoot</span>  </p>\n<h1 id=\"mybatis-快速入门\"><a href=\"#mybatis-快速入门\" class=\"headerlink\" title=\"mybatis 快速入门\"></a>mybatis 快速入门</h1><p>在创建时需要<br><img data-src=\"/assets/springboot%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.jpg\" alt=\"项目依赖\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"comment\">// 在运行时，会自动生成该接口的实现类对象(代理对象),并且讲该对象交给IOC容器管理</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;select id as ID,username,password,gender,addr from tb_user&quot;)</span></span><br><span class=\"line\">    List&lt;Users&gt; <span class=\"title function_\">selectAll</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/User&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper mapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/index&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">index</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;Users&gt; users = mapper.selectAll();</span><br><span class=\"line\">        System.out.println(users);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  users.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"数据库连接池\"><a href=\"#数据库连接池\" class=\"headerlink\" title=\"数据库连接池\"></a>数据库连接池</h1><ul>\n<li>特点</li>\n</ul>\n<ol>\n<li>数据库连接池是个容器，负责分配、管理数据库连接(Connection)资源重用</li>\n<li>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</li>\n</ol>\n<ul>\n<li>优势</li>\n</ul>\n<ol>\n<li>提升系统响应速度  </li>\n<li>释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏  </li>\n<li>避免数据库连接遗漏</li>\n</ol>\n<h1 id=\"lombok\"><a href=\"#lombok\" class=\"headerlink\" title=\"lombok\"></a>lombok</h1><p>Lombok是一个实用的Java类库，能通过注解的形式自动生成构造器、getter&#x2F;setter、equals、hashcode、toString等方法，并可以自动化生成日志变量，简化java开发、提高效率。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">注解</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">@Getter&#x2F;@Setter</td>\n<td align=\"left\">为所有的属性提供get&#x2F;set方法</td>\n</tr>\n<tr>\n<td align=\"left\">@ToString</td>\n<td align=\"left\">会给类自动生成易阅读的toString方法</td>\n</tr>\n<tr>\n<td align=\"left\">@EqualsAndHashode</td>\n<td align=\"left\">根据类所拥有的非静态字段自动重写equals方法和 hashCode方法</td>\n</tr>\n<tr>\n<td align=\"left\">@Data</td>\n<td align=\"left\">提供了更综合的生成代码功能 <strong>(@Getter +@Setter +@Tostring +@EqualsAndHashCode)</strong></td>\n</tr>\n<tr>\n<td align=\"left\">@NoArgsConstructor</td>\n<td align=\"left\">为实体类生成无参的构造器方法</td>\n</tr>\n<tr>\n<td align=\"left\">@AllArgsConstructor</td>\n<td align=\"left\">为实体类生成除了static修饰的字段之外带有各参数的构造器方法。</td>\n</tr>\n</tbody></table>\n",
            "tags": [
                "JAVA",
                "JAVASE"
            ]
        },
        {
            "id": "https://meteora233.github.io/2023/07/09/computer-science/java/javase/JavaSE_Day5/",
            "url": "https://meteora233.github.io/2023/07/09/computer-science/java/javase/JavaSE_Day5/",
            "title": "java网络通信、测试",
            "date_published": "2023-07-08T16:00:00.000Z",
            "content_html": "<p>note info:<strong>查漏补缺</strong><br>第五天复习 课程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUN2NDExMzcybT9wPTExMSZ2ZF9zb3VyY2U9ZWU3NjBiZjdhNGQ4OWQzZWU5MmY0ZjgzZjNhNjgyYzk=\">JAVA 入门基础</span><br>JAVA 网络通信<br>Welcome to this note, which covers some basic syntax of javaSE.</p>\n<h1 id=\"TCP-通信\"><a href=\"#TCP-通信\" class=\"headerlink\" title=\"TCP 通信\"></a>TCP 通信</h1><p><strong>Client</strong><br>多手多发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">      <span class=\"comment\">//Client 程序</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;客户端启动成功&quot;</span>);</span><br><span class=\"line\">      <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">8888</span>);</span><br><span class=\"line\">      <span class=\"type\">DataOutputStream</span> <span class=\"variable\">dos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(socket.getOutputStream());</span><br><span class=\"line\">      <span class=\"comment\">//TCP 协议</span></span><br><span class=\"line\">      <span class=\"comment\">// 1发，1收，一发</span></span><br><span class=\"line\">      <span class=\"comment\">// C-&gt;S,C&lt;-S,C-&gt;S</span></span><br><span class=\"line\">      Scanner sc=<span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">      <span class=\"type\">boolean</span> FLAG=<span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (FLAG)&#123;</span><br><span class=\"line\">          <span class=\"type\">String</span> <span class=\"variable\">content</span> <span class=\"operator\">=</span> sc.nextLine();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (content.equalsIgnoreCase(<span class=\"string\">&quot;Exit&quot;</span>))&#123;</span><br><span class=\"line\">              FLAG=<span class=\"literal\">false</span>;</span><br><span class=\"line\">              System.out.println(<span class=\"string\">&quot;退出成功&quot;</span>);</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              dos.writeUTF(content);</span><br><span class=\"line\">              dos.flush();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      dos.close();</span><br><span class=\"line\">      socket.close();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>服务器端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Server</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//服务端程序收到消息</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务端启动成功&quot;</span>);</span><br><span class=\"line\">        ServerSocket serverSocket=<span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">8888</span>);</span><br><span class=\"line\">        <span class=\"comment\">//等待客户端连接请求</span></span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> serverSocket.accept();</span><br><span class=\"line\">        <span class=\"type\">DataInputStream</span> <span class=\"variable\">dis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataInputStream</span>(socket.getInputStream());</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> dis.readUTF();</span><br><span class=\"line\">                System.out.println(rs);</span><br><span class=\"line\">                System.out.println(socket.getRemoteSocketAddress());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                System.out.println(socket.getRemoteSocketAddress()+<span class=\"string\">&quot;离线了&quot;</span>);</span><br><span class=\"line\">                dis.close();</span><br><span class=\"line\">                socket.close();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>支持多个客户端同时通信</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServerReaderThread</span> <span class=\"keyword\">extends</span>  <span class=\"title class_\">Thread</span>&#123;</span><br><span class=\"line\">    Socket socket=<span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"title function_\">ServerReaderThread</span><span class=\"params\">(Socket socket)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.socket=socket;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">DataInputStream</span> <span class=\"variable\">dis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataInputStream</span>(socket.getInputStream());</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> dis.readUTF();</span><br><span class=\"line\">                    System.out.println(rs);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    System.out.println(socket.getRemoteSocketAddress()+<span class=\"string\">&quot;下线了&quot;</span>);</span><br><span class=\"line\">                    dis.close();</span><br><span class=\"line\">                    socket.close();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Server</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//服务端程序收到消息</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务端启动成功&quot;</span>);</span><br><span class=\"line\">        ServerSocket serverSocket=<span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">8888</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> serverSocket.accept();</span><br><span class=\"line\">            System.out.println(socket.getRemoteSocketAddress()+<span class=\"string\">&quot;上线了&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">ServerReaderThread</span>(socket).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//等待客户端连接请求</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"群聊\"><a href=\"#群聊\" class=\"headerlink\" title=\"群聊\"></a>群聊</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Client 程序</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端启动成功&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">8888</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ClientReaderThread</span>(socket).start();</span><br><span class=\"line\">        <span class=\"type\">DataOutputStream</span> <span class=\"variable\">dos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(socket.getOutputStream());</span><br><span class=\"line\">        <span class=\"comment\">//TCP 协议</span></span><br><span class=\"line\">        <span class=\"comment\">// 1发，1收，一发</span></span><br><span class=\"line\">        <span class=\"comment\">// C-&gt;S,C&lt;-S,C-&gt;S</span></span><br><span class=\"line\">        Scanner sc=<span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"type\">boolean</span> FLAG=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (FLAG)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//接收服务端发送的消息</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">content</span> <span class=\"operator\">=</span> sc.nextLine();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (content.equalsIgnoreCase(<span class=\"string\">&quot;Exit&quot;</span>))&#123;</span><br><span class=\"line\">                FLAG=<span class=\"literal\">false</span>;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;退出成功&quot;</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                dos.writeUTF(content);</span><br><span class=\"line\">                dos.flush();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dos.close();</span><br><span class=\"line\">        socket.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Client 接收数据的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClientReaderThread</span> <span class=\"keyword\">extends</span>  <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">    Socket socket;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"title function_\">ClientReaderThread</span><span class=\"params\">(Socket socket)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.socket=socket;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">DataInputStream</span> <span class=\"variable\">dis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataInputStream</span>(socket.getInputStream());</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> dis.readUTF();</span><br><span class=\"line\">                    System.out.println(rs);</span><br><span class=\"line\">                    <span class=\"comment\">//把消息分发给所有客户端</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;自己下线了&quot;</span>);</span><br><span class=\"line\">                    dis.close();</span><br><span class=\"line\">                    socket.close();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Server 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Server</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Socket&gt; onlineSocket=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//服务端程序收到消息</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务端启动成功&quot;</span>);</span><br><span class=\"line\">        ServerSocket serverSocket=<span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">8888</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> serverSocket.accept();</span><br><span class=\"line\">            onlineSocket.add(socket);</span><br><span class=\"line\">            System.out.println(socket.getRemoteSocketAddress()+<span class=\"string\">&quot;上线了&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">ServerReaderThread</span>(socket).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//等待客户端连接请求</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Server 的多线程实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServerReaderThread</span> <span class=\"keyword\">extends</span>  <span class=\"title class_\">Thread</span>&#123;</span><br><span class=\"line\">    Socket socket=<span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"title function_\">ServerReaderThread</span><span class=\"params\">(Socket socket)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.socket=socket;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">DataInputStream</span> <span class=\"variable\">dis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataInputStream</span>(socket.getInputStream());</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> dis.readUTF();</span><br><span class=\"line\">                    System.out.println(rs);</span><br><span class=\"line\">                    <span class=\"comment\">//把消息分发给所有客户端</span></span><br><span class=\"line\">                    sendMsgToAll(rs);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    System.out.println(socket.getRemoteSocketAddress()+<span class=\"string\">&quot;下线了&quot;</span>);</span><br><span class=\"line\">                    Server.onlineSocket.remove(socket);</span><br><span class=\"line\">                    dis.close();</span><br><span class=\"line\">                    socket.close();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMsgToAll</span><span class=\"params\">(String rs)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Socket socket1 : Server.onlineSocket) &#123;</span><br><span class=\"line\">            <span class=\"type\">DataOutputStream</span> <span class=\"variable\">dos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(socket1.getOutputStream());</span><br><span class=\"line\">            dos.writeUTF(rs);</span><br><span class=\"line\">            dos.flush();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h1><p>导入 junit4 的 jar 文件<br>String 工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">stringutil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printNumber</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(name == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>; <span class=\"comment\">//停掉方法</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;名字长度是:&quot;</span> + name.length());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">getHaxIndex</span><span class=\"params\">(String data)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(data == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data.length();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringutilTest</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">@Test</span> <span class=\"comment\">//测试方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testPrintNumber</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        StringUtils.printNumber(<span class=\"string\">&quot;admin&quot;</span>);</span><br><span class=\"line\">        StringUtils.printNumber(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span> <span class=\"comment\">//测试方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testGetHaxIndex</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index1</span> <span class=\"operator\">=</span> Stringutil.getHaxIndex( data: <span class=\"literal\">null</span>);</span><br><span class=\"line\">        System.out.println(index1);</span><br><span class=\"line\">        <span class=\"type\">int</span> index2=Stringutil.getHaxIndex( data: <span class=\"string\">&quot;admin&quot;</span>);</span><br><span class=\"line\">        System.out.println(index2);</span><br><span class=\"line\">        Assert.assertEquals(<span class=\"string\">&quot;内部有bug&quot;</span>,<span class=\"number\">4</span>,index2);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//断言机制</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h1><p>反射就是:加载类，并允许以编程的方式解剖类中的各种成分（成员变量、方法、构造器等）。</p>\n<ol>\n<li>反射第一步:加载类,获取类的字节码:Class 对象</li>\n<li>获取类的构造器:Constructor 对象</li>\n<li>获取类的成员变量:Field 对象</li>\n<li>获取类的成员方法: Method</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ObjectFrame</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveObject</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception  &#123;</span><br><span class=\"line\">       <span class=\"comment\">//保存任意字段的字段和其数据进入文件</span></span><br><span class=\"line\">       PrintStream ps=<span class=\"keyword\">new</span> <span class=\"title class_\">PrintStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;src\\\\com\\\\test\\\\reflection\\\\data.txt&quot;</span>,<span class=\"literal\">true</span>));</span><br><span class=\"line\">       Class c=obj.getClass();</span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">cname</span> <span class=\"operator\">=</span> c.getSimpleName();</span><br><span class=\"line\">        ps.println(<span class=\"string\">&quot;==============&quot;</span>+cname+<span class=\"string\">&quot;======================&quot;</span>);</span><br><span class=\"line\">       <span class=\"comment\">//提取所有的成员变量</span></span><br><span class=\"line\">       Field[] fields = c.getDeclaredFields();</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//拿到成员变量的名字</span></span><br><span class=\"line\">           field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">           <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> field.getName();</span><br><span class=\"line\">            <span class=\"comment\">//huo</span></span><br><span class=\"line\">           <span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>+field.get(obj);</span><br><span class=\"line\">           ps.println(name+<span class=\"string\">&quot;=&quot;</span>+value);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       ps.close();</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestFrame</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        Student stu=<span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;zhangsan&quot;</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">        Teacher tc=<span class=\"keyword\">new</span> <span class=\"title class_\">Teacher</span>(<span class=\"number\">2</span>,<span class=\"string\">&quot;ashdj&quot;</span>,<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ObjectFrame.saveObject(stu);</span><br><span class=\"line\">        ObjectFrame.saveObject(tc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JAVA",
                "JAVASE"
            ]
        },
        {
            "id": "https://meteora233.github.io/2023/07/07/computer-science/java/javase/JavaSE_Day3/",
            "url": "https://meteora233.github.io/2023/07/07/computer-science/java/javase/JavaSE_Day3/",
            "title": "javaIO流",
            "date_published": "2023-07-06T16:00:00.000Z",
            "content_html": "<p>note info:<strong>查漏补缺</strong><br>第三天复习 课程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUN2NDExMzcybT9wPTExMSZ2ZF9zb3VyY2U9ZWU3NjBiZjdhNGQ4OWQzZWU5MmY0ZjgzZjNhNjgyYzk=\">JAVA入门基础</span><br>JAVA IO流<br>Welcome to this note, which covers some basic syntax of javaSE.</p>\n<p><strong>课堂笔记</strong></p>\n<h1 id=\"IO流\"><a href=\"#IO流\" class=\"headerlink\" title=\"IO流\"></a>IO流</h1><p>Input称为输入流：<strong>负责把数据读到内存中去</strong><br>Output称为输出流：<strong>负责把数据写出去</strong></p>\n<h2 id=\"字节流\"><a href=\"#字节流\" class=\"headerlink\" title=\"字节流\"></a>字节流</h2><p><strong>适合一切数据的拷贝(音配文件、文本)，不适合做输出</strong></p>\n<h3 id=\"FileInputStream\"><a href=\"#FileInputStream\" class=\"headerlink\" title=\"FileInputStream\"></a>FileInputStream</h3><p>每次读取一个字节，读取性能较差，读取汉字会乱码(汉字占三个字节)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;src\\\\com\\\\test\\\\IOTest\\\\aaa.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> line=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((line=is.read())!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        System.out.print((<span class=\"type\">char</span>)line);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\">    System.out.println(System.getProperty(<span class=\"string\">&quot;user.dir&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">//读取多个字节的数据,提高了性能依旧会出现中文乱码</span></span><br><span class=\"line\">    <span class=\"type\">byte</span>[] buffer=<span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> len=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((len=is.read(buffer))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//读多少倒多少 比如abcdw，第一次只读取了三个字节的数据，第二次只需要读取两个字节的数据</span></span><br><span class=\"line\">        String rs=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">        System.out.println(rs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//直接读取所有的数据</span></span><br><span class=\"line\">    <span class=\"type\">byte</span>[] buffer1=is.readAllBytes();</span><br><span class=\"line\">    len = is.read(buffer1);</span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer));</span><br><span class=\"line\">    is.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Outputstream\"><a href=\"#Outputstream\" class=\"headerlink\" title=\"Outputstream\"></a>Outputstream</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;src\\\\com\\\\test\\\\IOTest\\\\aaa.txt&quot;</span>,<span class=\"literal\">true</span>); <span class=\"comment\">//第二个参数默认为在文件后追加信息</span></span><br><span class=\"line\">    <span class=\"type\">byte</span>[] bytes=<span class=\"string\">&quot;啊sadh我xnzads&quot;</span>.getBytes();</span><br><span class=\"line\">    os.write(bytes);</span><br><span class=\"line\">    <span class=\"comment\">//换行</span></span><br><span class=\"line\">    os.write(<span class=\"string\">&quot;\\r\\n&quot;</span>.getBytes());</span><br><span class=\"line\">    os.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"图片复制\"><a href=\"#图片复制\" class=\"headerlink\" title=\"图片复制\"></a>图片复制</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">try</span>(<span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;src/com/test/IOTest/img11.jpg&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;D://img1.jpg&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//这里所定义的资源必须继承于Closeable接口，可以自动关闭流</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] buffer1=is.readAllBytes();</span><br><span class=\"line\">            os.write(buffer1);</span><br><span class=\"line\"><span class=\"comment\">//        byte[] buffer=new byte[1024];</span></span><br><span class=\"line\"><span class=\"comment\">//        int line=0;</span></span><br><span class=\"line\"><span class=\"comment\">//        while ((line=is.read(buffer))!=-1)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            os.write(buffer,0,line);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符流\"><a href=\"#字符流\" class=\"headerlink\" title=\"字符流\"></a>字符流</h2><p>适合做文件的读取,一个个字符读<br>代码和编码和读取的编码<strong>不一致</strong>会出现乱码</p>\n<h3 id=\"FileReader\"><a href=\"#FileReader\" class=\"headerlink\" title=\"FileReader\"></a>FileReader</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">Reader</span> <span class=\"variable\">fr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;src/com/test/IOTest/aaa.txt&quot;</span>);) &#123;</span><br><span class=\"line\"><span class=\"comment\">//            int c;</span></span><br><span class=\"line\"><span class=\"comment\">//            while ((c = fr.read()) != -1) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                System.out.println((char) c);</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//          高性能</span></span><br><span class=\"line\">            <span class=\"type\">char</span>[] buffer1 = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> len=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len=fr.read())!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer1,<span class=\"number\">0</span>,len));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"FileWriter\"><a href=\"#FileWriter\" class=\"headerlink\" title=\"FileWriter\"></a>FileWriter</h3><p>字符输出写数据后，必须刷新流或者关闭流，写出去的数据才生效</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> (</span><br><span class=\"line\">             <span class=\"type\">Writer</span> <span class=\"variable\">fw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"string\">&quot;src/com/test/IOTest/aaa.txt&quot;</span>,<span class=\"literal\">true</span>)</span><br><span class=\"line\">     ) &#123;</span><br><span class=\"line\">         fw.write(<span class=\"string\">&quot;aaaa&quot;</span>);</span><br><span class=\"line\">         fw.write(<span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\">         fw.write(<span class=\"string\">&quot;埃维亚的asd&quot;</span>,<span class=\"number\">0</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">         fw.write(<span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\">         fw.write(<span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[]&#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>&#125;);</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;写入完成&quot;</span>);</span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"缓冲流\"><a href=\"#缓冲流\" class=\"headerlink\" title=\"缓冲流\"></a>缓冲流</h1><ol>\n<li>对原始流进行包装、以提高原始流读写数据的性能</li>\n<li>原理:字节输入缓冲流自带8kb的缓冲池;字节输出缓冲流自带8kb的缓冲池;  <blockquote>\n<p>比如 原本16kb的数据，复制，每次读取一次1kb的数据，输入流需要循环16次，输出流也需要16次，累计32次<br>而使用缓冲流 则是在内存中直接读取缓冲区中的数据    </p>\n</blockquote>\n</li>\n<li>使用字节数组复制速度最快<br><img data-src=\"/assets%5Cbuffer.jpg\"></li>\n</ol>\n<h2 id=\"字节缓冲流\"><a href=\"#字节缓冲流\" class=\"headerlink\" title=\"字节缓冲流\"></a>字节缓冲流</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">InputStream</span> <span class=\"variable\">bis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;src/com/test/IOTest/aaa.txt&quot;</span>),<span class=\"number\">8192</span>*<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"type\">OutputStream</span> <span class=\"variable\">bos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;src/com/test/IOTest/b.txt&quot;</span>),<span class=\"number\">8192</span>*<span class=\"number\">2</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] buffer=<span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> len;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((len=bis.read())!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            bos.write(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;复制成功&quot;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符缓冲流\"><a href=\"#字符缓冲流\" class=\"headerlink\" title=\"字符缓冲流\"></a>字符缓冲流</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> (</span><br><span class=\"line\">               <span class=\"type\">BufferedReader</span> <span class=\"variable\">bis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;src/com/test/IOTest/aaa.txt&quot;</span>),<span class=\"number\">8192</span>*<span class=\"number\">2</span>);</span><br><span class=\"line\">               <span class=\"type\">Writer</span> <span class=\"variable\">bos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"string\">&quot;src/com/test/IOTest/b.txt&quot;</span>),<span class=\"number\">8192</span>*<span class=\"number\">2</span>)</span><br><span class=\"line\">       ) &#123;</span><br><span class=\"line\">           String line=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">           <span class=\"keyword\">while</span> ((line=bis.readLine())!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">               bos.write(line);</span><br><span class=\"line\">               bos.write(<span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">                <span class=\"type\">BufferedReader</span> <span class=\"variable\">bis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;src/com/test/IOTest/aaa.txt&quot;</span>),<span class=\"number\">8192</span>*<span class=\"number\">2</span>);</span><br><span class=\"line\">                <span class=\"type\">Writer</span> <span class=\"variable\">bos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"string\">&quot;src/com/test/IOTest/b.txt&quot;</span>),<span class=\"number\">8192</span>*<span class=\"number\">2</span>)</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            String line=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((line=bis.readLine())!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                res.add(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Collections.sort(res,String::compareToIgnoreCase);</span><br><span class=\"line\">            res.forEach(<span class=\"keyword\">new</span> <span class=\"title class_\">Consumer</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        bos.write(s);</span><br><span class=\"line\">                        bos.write(<span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"属性文件\"><a href=\"#属性文件\" class=\"headerlink\" title=\"属性文件\"></a>属性文件</h1><p>键值对形式</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">aaa</span>=<span class=\"string\">9090</span></span><br><span class=\"line\"><span class=\"attr\">ccc</span>=<span class=\"string\">0987</span></span><br><span class=\"line\"><span class=\"attr\">bbb</span>=<span class=\"string\">2020</span></span><br><span class=\"line\"><span class=\"attr\">admin</span>=<span class=\"string\">123456</span></span><br><span class=\"line\"><span class=\"attr\">abaabaab</span>=<span class=\"string\">982132</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        Properties properties=<span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>(); <span class=\"comment\">//map格式</span></span><br><span class=\"line\">        properties.load(<span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;src/com/test/IOTest/user.properties&quot;</span>));</span><br><span class=\"line\">        System.out.println(properties.getProperty(<span class=\"string\">&quot;admin&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//遍历全部的键值对</span></span><br><span class=\"line\">        Set&lt;String&gt; keys = properties.stringPropertyNames();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : keys) &#123;</span><br><span class=\"line\">            String value=properties.getProperty(key);</span><br><span class=\"line\">            System.out.println(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        properties.forEach((k,v)-&gt;&#123;</span><br><span class=\"line\">            System.out.println(k+<span class=\"string\">&quot;-------&quot;</span>+v);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//保存properties内容</span></span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">&quot;abaabaab&quot;</span>,<span class=\"string\">&quot;982132&quot;</span>);</span><br><span class=\"line\">        properties.store(<span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"string\">&quot;src/com/test/IOTest/user.properties&quot;</span>),<span class=\"string\">&quot;i save the info&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h1><h2 id=\"Logback\"><a href=\"#Logback\" class=\"headerlink\" title=\"Logback\"></a>Logback</h2><ol>\n<li>需要创建lib目录，添加logback-classic.jar、logback-core.jar、slf4j-api.jar<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOGGER=LoggerFactory.getLogger(<span class=\"string\">&quot;LogBackTest&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">    LOGGER.info(<span class=\"string\">&quot;开始执行方法&quot;</span>);</span><br><span class=\"line\">    chu(<span class=\"number\">10</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    LOGGER.info(<span class=\"string\">&quot;执行方法成功&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">chu</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span>&#123;</span><br><span class=\"line\">    LOGGER.debug(<span class=\"string\">&quot;参数A&quot;</span>+a);</span><br><span class=\"line\">    LOGGER.debug(<span class=\"string\">&quot;参数b&quot;</span>+b);</span><br><span class=\"line\">    <span class=\"type\">int</span> c=a/b;</span><br><span class=\"line\">    LOGGER.debug(c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"日志级别-优先级从低到高\"><a href=\"#日志级别-优先级从低到高\" class=\"headerlink\" title=\"日志级别(优先级从低到高)\"></a>日志级别(优先级从低到高)</h2><table>\n<thead>\n<tr>\n<th>日志级别</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>trace</td>\n<td>追踪指名程序运行轨迹</td>\n</tr>\n<tr>\n<td>debug</td>\n<td>调试，实际应用中一般将其作为最低级别，而trace则很少使用</td>\n</tr>\n<tr>\n<td>info</td>\n<td>输出重要的运行信息，数据连接，网络连接，IO操作等等，使用的较多</td>\n</tr>\n<tr>\n<td>warn</td>\n<td>警告信息，可能会发生问题，使用的较多</td>\n</tr>\n<tr>\n<td>error</td>\n<td>错误信息，使用较多</td>\n</tr>\n</tbody></table>\n<p>只有日志级别<strong>大于或等于核心配置文件的日志级别</strong>，才会被记录，否则不记录</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;info&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;FILE&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JAVA",
                "JAVASE"
            ]
        },
        {
            "id": "https://meteora233.github.io/2023/07/07/computer-science/java/javase/JavaSE_Day4/",
            "url": "https://meteora233.github.io/2023/07/07/computer-science/java/javase/JavaSE_Day4/",
            "title": "java多线程",
            "date_published": "2023-07-06T16:00:00.000Z",
            "content_html": "<p>note info:<strong>查漏补缺</strong><br>第四天复习 课程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUN2NDExMzcybT9wPTExMSZ2ZF9zb3VyY2U9ZWU3NjBiZjdhNGQ4OWQzZWU5MmY0ZjgzZjNhNjgyYzk=\">JAVA 入门基础</span><br>JAVA 多线程<br>Welcome to this note, which covers some basic syntax of javaSE.</p>\n<p><strong>课堂笔记</strong></p>\n<h1 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h1><p>多条线程由 cpu 负责调度</p>\n<h2 id=\"创建线程\"><a href=\"#创建线程\" class=\"headerlink\" title=\"创建线程\"></a>创建线程</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//基本使用</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;子线程输出:&quot;</span>+i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;主线程输出:&quot;</span>+i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//需要返回值</span></span><br><span class=\"line\">    Callable&lt;String&gt; call = <span class=\"keyword\">new</span> <span class=\"title class_\">MyCallable</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"comment\">//callable对象不是一个任务对象，thread方法无法直接接收</span></span><br><span class=\"line\">    <span class=\"comment\">//要把callable对象转换成</span></span><br><span class=\"line\">    FutureTask&lt;String&gt; f1 = <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;&gt;(call);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(f1).start();</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> f1.get();</span><br><span class=\"line\">    System.out.println(s);</span><br><span class=\"line\">    Callable&lt;String&gt; call2 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyCallable</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">    <span class=\"comment\">//callable对象不是一个任务对象，thread方法无法直接接收</span></span><br><span class=\"line\">    <span class=\"comment\">//要把callable对象转换成</span></span><br><span class=\"line\">    FutureTask&lt;String&gt; f12 = <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;&gt;(call2);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(f12).start();</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> f12.get();</span><br><span class=\"line\">    System.out.println(s1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyCallable</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Callable</span>&lt;String&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyCallable</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.n = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//描述线程的任务</span></span><br><span class=\"line\">        <span class=\"type\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            sum+=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;求出1-&quot;</span>+n+<span class=\"string\">&quot;和为:&quot;</span>+sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sleep-方法和-join-方法\"><a href=\"#sleep-方法和-join-方法\" class=\"headerlink\" title=\"sleep 方法和 join 方法\"></a>sleep 方法和 join 方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">    Thread thread1=<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span> ; i++) &#123;</span><br><span class=\"line\">            System.out.print(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i==<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//join方法 ，让调用当前方法的线程先执行完</span></span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>(<span class=\"string\">&quot;线程2&quot;</span>);</span><br><span class=\"line\">    System.out.println(t1.getName());</span><br><span class=\"line\">    t1.start();</span><br><span class=\"line\">    t1.join();</span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>(<span class=\"string\">&quot;线程3&quot;</span>);</span><br><span class=\"line\">    System.out.println(t2.getName());</span><br><span class=\"line\">    t2.start();</span><br><span class=\"line\">    t2.join();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThread</span> <span class=\"keyword\">extends</span>  <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyThread</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程安全问题\"><a href=\"#线程安全问题\" class=\"headerlink\" title=\"线程安全问题\"></a>线程安全问题</h2><h3 id=\"同步代码块\"><a href=\"#同步代码块\" class=\"headerlink\" title=\"同步代码块\"></a>同步代码块</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Accout</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  <span class=\"type\">double</span> money;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String cardId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Accout</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Accout</span><span class=\"params\">(String cardId,<span class=\"type\">double</span> money)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.money = money;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cardId = cardId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">drawMoney</span><span class=\"params\">(<span class=\"type\">double</span> money)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> Thread.currentThread().getName();</span><br><span class=\"line\">        <span class=\"comment\">// 同步代码块</span></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>) &#123;   <span class=\"comment\">//锁对象，多线程竞争锁对象（代表共享资源）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.money&lt;money)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;余额不足&quot;</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                System.out.println(name+<span class=\"string\">&quot;来取钱&quot;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.money-=money;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;余额为&quot;</span>+<span class=\"built_in\">this</span>.money);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//静态方法使用类名.class 作为锁</span></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (Accout.class)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getMoney</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMoney</span><span class=\"params\">(<span class=\"type\">double</span> money)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.money = money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getCardId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cardId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCardId</span><span class=\"params\">(String cardId)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cardId = cardId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThread</span> <span class=\"keyword\">extends</span>  <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">    Accout acc=<span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyThread</span><span class=\"params\">(String name,Accout acc)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.acc=acc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        acc.drawMoney(<span class=\"number\">100000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">Accout acc=<span class=\"keyword\">new</span> <span class=\"title class_\">Accout</span>(<span class=\"string\">&quot;ICBC-110&quot;</span>,<span class=\"number\">100000</span>);</span><br><span class=\"line\">     <span class=\"comment\">//创建两个线程，代表小明小红</span></span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>(<span class=\"string\">&quot;小明&quot;</span>,acc).start();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>(<span class=\"string\">&quot;小红&quot;</span>,acc).start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     Accout acc1=<span class=\"keyword\">new</span> <span class=\"title class_\">Accout</span>(<span class=\"string\">&quot;ICBC-110&quot;</span>,<span class=\"number\">100000</span>);</span><br><span class=\"line\">     <span class=\"comment\">//创建两个线程，代表小明小红</span></span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>(<span class=\"string\">&quot;小黑&quot;</span>,acc1).start();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>(<span class=\"string\">&quot;小白&quot;</span>,acc1).start();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"同步方法\"><a href=\"#同步方法\" class=\"headerlink\" title=\"同步方法\"></a>同步方法</h3><p>在定义方法的时候添加一个 synchronized 修饰符</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">drawMoney</span><span class=\"params\">(<span class=\"type\">double</span> money)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> Thread.currentThread().getName();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.money&lt;money)&#123;</span><br><span class=\"line\">          System.out.println(<span class=\"string\">&quot;余额不足&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          System.out.println(name+<span class=\"string\">&quot;来取钱&quot;</span>);</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.money-=money;</span><br><span class=\"line\">          System.out.println(<span class=\"string\">&quot;余额为&quot;</span>+<span class=\"built_in\">this</span>.money);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lock-锁\"><a href=\"#Lock-锁\" class=\"headerlink\" title=\"Lock 锁\"></a>Lock 锁</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Lock lk=<span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">drawMoney</span><span class=\"params\">(<span class=\"type\">double</span> money)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> Thread.currentThread().getName();</span><br><span class=\"line\">    <span class=\"comment\">// 同步代码块</span></span><br><span class=\"line\">    lk.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.money&lt;money)&#123;</span><br><span class=\"line\">            System.out.println(name+<span class=\"string\">&quot;来取钱，余额不足&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.money-=money;</span><br><span class=\"line\">            System.out.println(name+<span class=\"string\">&quot;来取钱余额为&quot;</span>+<span class=\"built_in\">this</span>.money);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//即使中间代码出错，还是能解锁</span></span><br><span class=\"line\">        lk.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h2><p>当多个线程共同操作共享资源时，线程间通过某种方式互相告知自己的状态，以相互协调，并避免无效的资源争夺(生产者消费者)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">//创建三个生产者者线程</span></span><br><span class=\"line\">    Desk desk=<span class=\"keyword\">new</span> <span class=\"title class_\">Desk</span>();</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            desk.put();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"string\">&quot;厨师1&quot;</span>).start();</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            desk.put();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"string\">&quot;厨师2&quot;</span>).start();</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            desk.put();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"string\">&quot;厨师三&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建三个消费者线程</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            desk.get();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"string\">&quot;吃货1&quot;</span>).start();</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            desk.get();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"string\">&quot;吃货2&quot;</span>).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Desk</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; things=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//放包子</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">()</span>  &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> Thread.currentThread().getName();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (things.size()==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                things.add(name+<span class=\"string\">&quot;做的包子&quot;</span>);</span><br><span class=\"line\">                System.out.println(name+<span class=\"string\">&quot;做了一个包子&quot;</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"comment\">//唤醒别人等待自己</span></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.notifyAll();</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.notifyAll();</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">get</span><span class=\"params\">()</span>  &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> Thread.currentThread().getName();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (things.size()!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                System.out.println(name+<span class=\"string\">&quot;吃了&quot;</span>+things.remove(<span class=\"number\">0</span>));</span><br><span class=\"line\">                things.clear();</span><br><span class=\"line\">                <span class=\"comment\">//唤醒别人等待自己</span></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.notifyAll();</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.notifyAll();</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h1><p><strong>一个可以复用线程的技术</strong>  </p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">corePoolSize</td>\n<td align=\"left\">核心线程的数量</td>\n</tr>\n<tr>\n<td align=\"left\">maximumPoolSize</td>\n<td align=\"left\">指定线程池的最大线程数量（若核心线程数量为 3,最大线程数量为五，则有 2 个临时线程）</td>\n</tr>\n<tr>\n<td align=\"left\">KeepAliveTime</td>\n<td align=\"left\">临时线程的存活时间</td>\n</tr>\n<tr>\n<td align=\"left\">unit</td>\n<td align=\"left\">指定线程存活的时间</td>\n</tr>\n<tr>\n<td align=\"left\">workQueue</td>\n<td align=\"left\">指定线程池的任务队列</td>\n</tr>\n<tr>\n<td align=\"left\">threadFactory</td>\n<td align=\"left\">指定线程池的线程工厂</td>\n</tr>\n<tr>\n<td align=\"left\">handler</td>\n<td align=\"left\">指定线程池的任务拒绝策略(若都满了，如何拒绝)</td>\n</tr>\n<tr>\n<td align=\"left\">可以控制任务的数量，重复的利用线程</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li>线程池的注意事项</li>\n</ul>\n<ol>\n<li>临时线程什么时候创建?<br>新任务提交时发现核心线程都在忙，任务队列也满了，并且还可以创建临时线程，此时才会创建临时线程。</li>\n<li>什么时候会开始拒绝新任务?<br>核心线程和临时线程都在忙，任务队列也满了，新的任务过来的时候才会开始拒绝任务。</li>\n</ol>\n<p>新任务拒绝策略</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">策略</th>\n<th align=\"left\">详解</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">ThreadPoolExecutor.AbortPolicy</td>\n<td align=\"left\">丢弃任务并抛出 RejectedExecutionException 异常。<strong>是默认的策略</strong></td>\n</tr>\n<tr>\n<td align=\"left\">ThreadPoolExecutor.DiscardPolicy</td>\n<td align=\"left\">丢弃任务，但是不抛出异常这是不推荐的做法</td>\n</tr>\n<tr>\n<td align=\"left\">ThreadPoolExecutor.DiscardoldestPolicy</td>\n<td align=\"left\">抛弃队列中等待最久的任务然后把当前任务加入队列中</td>\n</tr>\n<tr>\n<td align=\"left\">ThreadPoolExecutor.CallerRunsPolicy</td>\n<td align=\"left\">由主线程[main]负责调用任务的 run()方法从而绕过线程池直接执行</td>\n</tr>\n</tbody></table>\n<p>实现方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyRunable</span> <span class=\"keyword\">implements</span>  <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//任务做什么</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> Thread.currentThread().getName();</span><br><span class=\"line\">            System.out.println(name+<span class=\"string\">&quot;==&gt;&quot;</span>+<span class=\"string\">&quot;6666&quot;</span>);</span><br><span class=\"line\">            Thread.sleep(Integer.MAX_VALUE);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程池处理-Runable-任务\"><a href=\"#线程池处理-Runable-任务\" class=\"headerlink\" title=\"线程池处理 Runable 任务\"></a>线程池处理 Runable 任务</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"type\">ExecutorService</span> <span class=\"variable\">pool</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>&lt;&gt;(<span class=\"number\">4</span>), Executors.defaultThreadFactory(), <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class=\"line\">    <span class=\"type\">Runnable</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyRunable</span>();</span><br><span class=\"line\">    pool.execute(target);   <span class=\"comment\">//自动创建新线程，自动处理这个任务，自己执行</span></span><br><span class=\"line\">    pool.execute(target);   <span class=\"comment\">//自动创建新线程，自动处理这个任务，自己执行</span></span><br><span class=\"line\">    pool.execute(target);   <span class=\"comment\">//自动创建新线程，自动处理这个任务，自己执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    pool.execute(target);   <span class=\"comment\">//复用核心线程,若核心线程都在忙，进入任务队列排队</span></span><br><span class=\"line\">    pool.execute(target);   <span class=\"comment\">//复用核心线程</span></span><br><span class=\"line\">    pool.execute(target);   <span class=\"comment\">//复用核心线程</span></span><br><span class=\"line\">    pool.execute(target);   <span class=\"comment\">//复用核心线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">    pool.execute(target);   <span class=\"comment\">//占满四个任务线程后</span></span><br><span class=\"line\">    pool.execute(target);   <span class=\"comment\">//占满四个任务线程后</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//全满了之后，需要拒绝</span></span><br><span class=\"line\">    pool.execute(target);   <span class=\"comment\">//占满四个任务线程后</span></span><br><span class=\"line\">    <span class=\"comment\">//启动</span></span><br><span class=\"line\"></span><br><span class=\"line\">    pool.shutdown(); <span class=\"comment\">//任务完成后关闭线程池</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程池处理-Callable-任务\"><a href=\"#线程池处理-Callable-任务\" class=\"headerlink\" title=\"线程池处理 Callable 任务\"></a>线程池处理 Callable 任务</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException&#123;</span><br><span class=\"line\">  <span class=\"type\">ExecutorService</span> <span class=\"variable\">pool</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>&lt;&gt;(<span class=\"number\">4</span>), Executors.defaultThreadFactory(), <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class=\"line\">    Future&lt;String&gt; f1 = pool.submit(<span class=\"keyword\">new</span> <span class=\"title class_\">MyCallable</span>(<span class=\"number\">100</span>));</span><br><span class=\"line\">    System.out.println(f1.get());</span><br><span class=\"line\">    Future&lt;String&gt; f2 = pool.submit(<span class=\"keyword\">new</span> <span class=\"title class_\">MyCallable</span>(<span class=\"number\">200</span>));</span><br><span class=\"line\">    System.out.println(f2.get());</span><br><span class=\"line\">    Future&lt;String&gt; f3 = pool.submit(<span class=\"keyword\">new</span> <span class=\"title class_\">MyCallable</span>(<span class=\"number\">300</span>));</span><br><span class=\"line\">    System.out.println(f3.get());</span><br><span class=\"line\">    Future&lt;String&gt; f4 = pool.submit(<span class=\"keyword\">new</span> <span class=\"title class_\">MyCallable</span>(<span class=\"number\">400</span>));</span><br><span class=\"line\">    System.out.println(f4.get());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Executors-类\"><a href=\"#Executors-类\" class=\"headerlink\" title=\"Executors 类\"></a>Executors 类</h2><table>\n<thead>\n<tr>\n<th align=\"left\">方法名称</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">public static ExecutorService newFixedThreadPool(int nThreads)</td>\n<td align=\"left\">创建固定线程数量的线程池，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程替代它。</td>\n</tr>\n<tr>\n<td align=\"left\">public static Executorservice newsingleThreadExecutor()</td>\n<td align=\"left\">创建只有一个线程的线程池对象，如果该线程出现异常而结束，那么线程池会补充一个新线程。</td>\n</tr>\n<tr>\n<td align=\"left\">public static ExecutorService newcachedThreadPoo1()</td>\n<td align=\"left\">线程数量随着任务增加而增加，如果线程任务执行完毕且空闲了 60s 则会被回收掉。</td>\n</tr>\n<tr>\n<td align=\"left\">public static ScheduledExecutorService newScheduledThreadPoo1(int corePoolsize)</td>\n<td align=\"left\">创建一个线程池，可以实现在给定的延迟后运行任务，或者定期执行任务。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">   <span class=\"type\">ExecutorService</span> <span class=\"variable\">pool</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\">    Future&lt;String&gt; f1 = pool.submit(<span class=\"keyword\">new</span> <span class=\"title class_\">MyCallable</span>(<span class=\"number\">100</span>));</span><br><span class=\"line\">    System.out.println(f1.get());</span><br><span class=\"line\">    Future&lt;String&gt; f2 = pool.submit(<span class=\"keyword\">new</span> <span class=\"title class_\">MyCallable</span>(<span class=\"number\">200</span>));</span><br><span class=\"line\">    System.out.println(f2.get());</span><br><span class=\"line\">    Future&lt;String&gt; f3 = pool.submit(<span class=\"keyword\">new</span> <span class=\"title class_\">MyCallable</span>(<span class=\"number\">300</span>));</span><br><span class=\"line\">    System.out.println(f3.get());</span><br><span class=\"line\">    Future&lt;String&gt; f4 = pool.submit(<span class=\"keyword\">new</span> <span class=\"title class_\">MyCallable</span>(<span class=\"number\">400</span>));</span><br><span class=\"line\">    System.out.println(f4.get());</span><br><span class=\"line\">    pool.shutdown();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>核心线程数量</p>\n<ol>\n<li>计算密集型的任务: 核心线程数量:CPU 核数+1</li>\n<li>IO 密集型的任务:CPU 核数*2</li>\n</ol>\n<h2 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h2><p><img data-src=\"/assets%5CThreadStatus.jpg\"></p>\n",
            "tags": [
                "JAVA",
                "JAVASE"
            ]
        },
        {
            "id": "https://meteora233.github.io/2023/07/06/computer-science/java/javase/JavaSE_Day2/",
            "url": "https://meteora233.github.io/2023/07/06/computer-science/java/javase/JavaSE_Day2/",
            "title": "java泛型",
            "date_published": "2023-07-05T16:00:00.000Z",
            "content_html": "<p>note info:<strong>查漏补缺</strong><br>第二天复习 课程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUN2NDExMzcybT9wPTExMSZ2ZF9zb3VyY2U9ZWU3NjBiZjdhNGQ4OWQzZWU5MmY0ZjgzZjNhNjgyYzk=\">JAVA入门基础</span><br>JAVA Generic Content and Common Method<br>Welcome to this note, which covers some basic syntax of javaSE.</p>\n<p><strong>课堂笔记</strong></p>\n<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><h2 id=\"泛型接口\"><a href=\"#泛型接口\" class=\"headerlink\" title=\"泛型接口\"></a>泛型接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Data</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    ArrayList&lt;T&gt; <span class=\"title function_\">getByName</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(T t)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建一个实现类 实现这个泛型接口把需要的类型填入进去</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"type\">int</span> num=<span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  String Name=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">student</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StudentData</span> <span class=\"keyword\">implements</span>  <span class=\"title class_\">Data</span>&lt;student&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArrayList&lt;student&gt; <span class=\"title function_\">getByName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(student student)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"常用API\"><a href=\"#常用API\" class=\"headerlink\" title=\"常用API\"></a>常用API</h1><h2 id=\"Object类\"><a href=\"#Object类\" class=\"headerlink\" title=\"Object类\"></a>Object类</h2><ol>\n<li>equals()默认比较两个对象的地址,重写后比较两个对象的值</li>\n<li>clone()对象，clone方法是protected修饰的 <strong>protected任意包的父类的子类，能访问到他父类的protected方法，而父类的对象也无法访问protected方法</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">student</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Cloneable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>     <span class=\"type\">int</span> num=<span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  String Name=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">student</span><span class=\"params\">(<span class=\"type\">int</span> num, String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.num = num;</span><br><span class=\"line\">        Name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Object <span class=\"title function_\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//比较两个对象的地址</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span> == o) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//比较的对象为null或者比较的两者类型不同 直接返回false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"literal\">null</span> || getClass() != o.getClass()) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">//开始比较内容</span></span><br><span class=\"line\">        <span class=\"type\">student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> (student) o;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num == student.num &amp;&amp;</span><br><span class=\"line\">                Objects.equals(Name, student.Name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.hash(num, Name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">        student stu=<span class=\"keyword\">new</span> <span class=\"title class_\">student</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;zhangsan&quot;</span>);</span><br><span class=\"line\">        student stu1=<span class=\"keyword\">new</span> <span class=\"title class_\">student</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;zhangsan&quot;</span>);</span><br><span class=\"line\">        System.out.println(stu.equals(stu1));</span><br><span class=\"line\">        <span class=\"type\">student</span> <span class=\"variable\">stu2</span> <span class=\"operator\">=</span> (student) stu.clone();</span><br><span class=\"line\">        System.out.println(stu2);;</span><br><span class=\"line\">        System.out.println(stu);;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Array类\"><a href=\"#Array类\" class=\"headerlink\" title=\"Array类\"></a>Array类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">23</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">        <span class=\"comment\">//截取数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr1 = Arrays.copyOfRange(arr, <span class=\"number\">1</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr1));</span><br><span class=\"line\">        <span class=\"comment\">//拷贝指定长度的数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr2 = Arrays.copyOf(arr, <span class=\"number\">10</span>);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr2));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">double</span>[] prices = &#123;<span class=\"number\">98.2</span>, <span class=\"number\">120</span>, <span class=\"number\">100</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//把所有的价格打八折存进去</span></span><br><span class=\"line\">        Arrays.setAll(prices, <span class=\"keyword\">new</span> <span class=\"title class_\">IntToDoubleFunction</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">applyAsDouble</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> prices[i] * <span class=\"number\">0.8</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(Arrays.toString(prices));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"Arrays排序\"><a href=\"#Arrays排序\" class=\"headerlink\" title=\"Arrays排序\"></a>Arrays排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>  &#123;</span><br><span class=\"line\">        <span class=\"comment\">//数组排序</span></span><br><span class=\"line\">        <span class=\"type\">double</span>[] prices = &#123;<span class=\"number\">98.2</span>, <span class=\"number\">120</span>, <span class=\"number\">100</span>&#125;;</span><br><span class=\"line\">        Arrays.sort(prices);</span><br><span class=\"line\">        System.out.println(Arrays.toString(prices));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//对对象排序</span></span><br><span class=\"line\">        student[] students = <span class=\"keyword\">new</span> <span class=\"title class_\">student</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">student</span>(<span class=\"number\">3</span>, <span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"number\">32</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">student</span>(<span class=\"number\">4</span>, <span class=\"string\">&quot;lisi&quot;</span>, <span class=\"number\">28</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">student</span>(<span class=\"number\">1</span>, <span class=\"string\">&quot;wy&quot;</span>, <span class=\"number\">12</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">student</span>(<span class=\"number\">5</span>, <span class=\"string\">&quot;aadasjdas&quot;</span>, <span class=\"number\">43</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        Arrays.sort(students);</span><br><span class=\"line\">        System.out.println(Arrays.toString(students));</span><br><span class=\"line\">        Arrays.sort(students, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;student&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(student student, student t1)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 约定1：认为左边对象 &gt; 右边对象 返回一个正整数</span></span><br><span class=\"line\">                <span class=\"comment\">// 约定2：认为左边对象 &lt; 右边对象 返回一个负整数</span></span><br><span class=\"line\">                <span class=\"comment\">// 约定3：认为左边对象 = 右边对象 返回一个负整数</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (student.age &gt; t1.age) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (student.age &lt; t1.age) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"comment\">//return  student.age-t1.age; 升序</span></span><br><span class=\"line\">                <span class=\"comment\">//return  student.age-this.age;   降序</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//Arrays.sort(students, (student,t1)-&gt;student.age-t1.age); 缩略写法</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h1><p>只能简化函数式接口(<strong>是接口，且只有一个抽象方法</strong>)的匿名内部类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        go(()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;游泳ing&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">go</span><span class=\"params\">(Swimming sw)</span>&#123;</span><br><span class=\"line\">        sw.swin();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span>  <span class=\"title class_\">Swimming</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">swin</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h1><h2 id=\"静态-实例方法\"><a href=\"#静态-实例方法\" class=\"headerlink\" title=\"静态&#x2F;实例方法\"></a>静态&#x2F;实例方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        student[] students = <span class=\"keyword\">new</span> <span class=\"title class_\">student</span>[]&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">student</span>(<span class=\"number\">3</span>, <span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"number\">32</span>),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">student</span>(<span class=\"number\">4</span>, <span class=\"string\">&quot;lisi&quot;</span>, <span class=\"number\">28</span>),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">student</span>(<span class=\"number\">1</span>, <span class=\"string\">&quot;wy&quot;</span>, <span class=\"number\">12</span>),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">student</span>(<span class=\"number\">5</span>, <span class=\"string\">&quot;aadasjdas&quot;</span>, <span class=\"number\">43</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"><span class=\"comment\">//      Arrays.sort(students, (student,t1)-&gt;student.age-t1.age);</span></span><br><span class=\"line\">        <span class=\"comment\">//静态方法引用</span></span><br><span class=\"line\">        Arrays.sort(students,CompareByData::compareByAge);</span><br><span class=\"line\">        <span class=\"comment\">//实例方法引用</span></span><br><span class=\"line\">        CompareByData compare=<span class=\"keyword\">new</span> <span class=\"title class_\">CompareByData</span>();</span><br><span class=\"line\">        Arrays.sort(students,compare::compareByAgeDesc);</span><br><span class=\"line\">        System.out.println(Arrays.toString(students));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CompareByData</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">compareByAge</span><span class=\"params\">(student stu1,student stu2&#123;</span></span><br><span class=\"line\"><span class=\"params\">        return  stu1.age-stu2.age;</span></span><br><span class=\"line\"><span class=\"params\">    &#125;</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">public</span>  <span class=\"type\">int</span> compareByAgeDesc(student stu1,student stu2)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  stu2.age-stu1.age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"特例类型方法引用\"><a href=\"#特例类型方法引用\" class=\"headerlink\" title=\"特例类型方法引用\"></a>特例类型方法引用</h2><p>如果某个lambda表达式中只是调用一个实例方法，并且参数列表的第一个参数是作为方法的主调，后面的参数是作为该实例方法入参的，则此时可以使用特定的类型方法引用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        String[] name=&#123;<span class=\"string\">&quot;ahasd&quot;</span>,<span class=\"string\">&quot;aaasd&quot;</span>,<span class=\"string\">&quot;pppadas&quot;</span>,<span class=\"string\">&quot;Zasdas&quot;</span>,<span class=\"string\">&quot;Asdsa&quot;</span>,<span class=\"string\">&quot;TUasd&quot;</span>&#125;;</span><br><span class=\"line\">        Arrays.sort(name);</span><br><span class=\"line\">        <span class=\"comment\">//忽略首字符大小写进行排序</span></span><br><span class=\"line\">        <span class=\"comment\">//Arrays.sort(name, (s,t1)-&gt; s.compareToIgnoreCase(t1));</span></span><br><span class=\"line\">        <span class=\"comment\">//特定类型方法引用</span></span><br><span class=\"line\">        Arrays.sort(name, String::compareToIgnoreCase);</span><br><span class=\"line\">        System.out.println(Arrays.toString(name));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造器引用\"><a href=\"#构造器引用\" class=\"headerlink\" title=\"构造器引用\"></a>构造器引用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//CreateStu cstu=(num,name,age)-&gt;new student(num,name,age);</span></span><br><span class=\"line\">    CreateStu cstu1=student::<span class=\"keyword\">new</span>;</span><br><span class=\"line\">    <span class=\"type\">student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> cstu1.create(<span class=\"number\">1</span>, <span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"number\">89</span>);</span><br><span class=\"line\">    System.out.println(student);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h1><h2 id=\"Collectioon-接口-单列集合\"><a href=\"#Collectioon-接口-单列集合\" class=\"headerlink\" title=\"Collectioon(接口)单列集合\"></a>Collectioon(接口)单列集合</h2><ul>\n<li>List<E> 有序、可重复、有索引<blockquote>\n<p>ArrayList<E>、LinkedList<E>:有序、可重复、有索引<br>ArrayList 查询快、删除慢，添加效率低</E></E></p>\n</blockquote>\n</E></li>\n<li>Set<E> 无序、不重复、无索引<blockquote>\n<p>HashSet: 无序(<strong>添加的顺序喝读取的顺序不一致</strong>)、不重复、无索引<br>LinkHashSet: <strong>有序</strong>、不重复、无索引<br>TreeSet:按照大小默认升序排列、不重复、无索引</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//遍历</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; res=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    Iterator&lt;String&gt; iterator = res.iterator();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (iterator.hasNext())&#123;</span><br><span class=\"line\">        System.out.println(iterator.next());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.forEach(s-&gt; System.out.println(s));</span><br><span class=\"line\">    res.forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></E></li>\n</ul>\n<h2 id=\"HashSet特点\"><a href=\"#HashSet特点\" class=\"headerlink\" title=\"HashSet特点\"></a>HashSet特点</h2><ul>\n<li>哈希值<blockquote>\n<p>不同对象的，它们的哈希值可能相同(哈希碰撞),一般不同<br>JDK8 之前是数组+链表，JDK8 之后是数组+链表+红黑树</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"Conllections工具类\"><a href=\"#Conllections工具类\" class=\"headerlink\" title=\"Conllections工具类\"></a>Conllections工具类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    List&lt;String&gt; res=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//添加元素</span></span><br><span class=\"line\">    Collections.addAll(res,<span class=\"string\">&quot;张三&quot;</span>,<span class=\"string\">&quot;lisi&quot;</span>,<span class=\"string\">&quot;wangwu&quot;</span>);</span><br><span class=\"line\">    System.out.println(res);</span><br><span class=\"line\">    <span class=\"comment\">//打乱集合</span></span><br><span class=\"line\">    Collections.shuffle(res);</span><br><span class=\"line\">    List&lt;Movies&gt; movies=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    movies.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Movies</span>(<span class=\"string\">&quot;zxjkasdsa&quot;</span>,<span class=\"number\">9.0</span>,<span class=\"string\">&quot;asdasd&quot;</span>));</span><br><span class=\"line\">    movies.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Movies</span>(<span class=\"string\">&quot;awrwer&quot;</span>,<span class=\"number\">8.0</span>,<span class=\"string\">&quot;wewq&quot;</span>));</span><br><span class=\"line\">    movies.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Movies</span>(<span class=\"string\">&quot;zcxzxcz&quot;</span>,<span class=\"number\">9.1</span>,<span class=\"string\">&quot;vxcvdf&quot;</span>));</span><br><span class=\"line\">    Collections.sort(movies,(m1,m2)-&gt;Double.compare(m1.getSc(),m2.getSc()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Map集合-双列集合\"><a href=\"#Map集合-双列集合\" class=\"headerlink\" title=\"Map集合 双列集合\"></a>Map集合 双列集合</h2><ul>\n<li>HashMap  <blockquote>\n<p>按照键、无序(<strong>对象比较依赖重写equals()和hashcode()方法</strong>)、不重复、无索引</p>\n</blockquote>\n</li>\n<li>LinkHashMap  <blockquote>\n<p>按照键、有序、不重复、无索引</p>\n</blockquote>\n</li>\n<li>TreeMap<blockquote>\n<p>可排序(默认升序)、不重复、无索引</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>常用方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>  &#123;</span><br><span class=\"line\">      Map&lt;String,Integer&gt; map1=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">      map1.put(<span class=\"string\">&quot;zs&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">      map1.put(<span class=\"string\">&quot;aca&quot;</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">      map1.put(<span class=\"string\">&quot;ww&quot;</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">      map1.put(<span class=\"string\">&quot;ls&quot;</span>,<span class=\"number\">29</span>);</span><br><span class=\"line\">      <span class=\"comment\">//获取键对应的值</span></span><br><span class=\"line\">      System.out.println(map1.get(<span class=\"string\">&quot;zs&quot;</span>));</span><br><span class=\"line\">      <span class=\"comment\">//是否包含值/键</span></span><br><span class=\"line\">      System.out.println(map1.containsKey(<span class=\"string\">&quot;zs&quot;</span>));</span><br><span class=\"line\">      System.out.println(map1.containsValue(<span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">      Set&lt;String&gt; keys = map1.keySet();</span><br><span class=\"line\">      keys.forEach((System.out::println));</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//合并Map集合</span></span><br><span class=\"line\">      Map&lt;String,Integer&gt; maps=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">      maps.put(<span class=\"string\">&quot;aaa&quot;</span>,<span class=\"number\">12</span>);</span><br><span class=\"line\">      <span class=\"comment\">//把map1的全倒入maps中</span></span><br><span class=\"line\">      maps.putAll(map1);</span><br><span class=\"line\">      <span class=\"comment\">//遍历方法1</span></span><br><span class=\"line\">      Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = maps.entrySet();</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (Map.Entry&lt;String, Integer&gt; entry : entries) &#123;</span><br><span class=\"line\">          <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> entry.getKey();</span><br><span class=\"line\">          <span class=\"type\">Integer</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> entry.getValue();</span><br><span class=\"line\">          System.out.println(key+<span class=\"string\">&quot;:&quot;</span>+value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//2</span></span><br><span class=\"line\">      maps.forEach((k,v)-&gt;&#123;</span><br><span class=\"line\">          System.out.println(k+<span class=\"string\">&quot;:&quot;</span>+v);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Stream流\"><a href=\"#Stream流\" class=\"headerlink\" title=\"Stream流\"></a>Stream流</h1><p>Stream流只能对Collection类型的<br><strong>流只能收集一次</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    List&lt;String&gt; names=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    Collections.addAll(names,<span class=\"string\">&quot;qwecx&quot;</span>,<span class=\"string\">&quot;lsi&quot;</span>,<span class=\"string\">&quot;wws&quot;</span>,<span class=\"string\">&quot;absaw&quot;</span>,<span class=\"string\">&quot;cxasd&quot;</span><span class=\"string\">&quot;aaa&quot;</span>,<span class=\"string\">&quot;acdsd&quot;</span>);</span><br><span class=\"line\">    List&lt;String&gt; res = names.stream().filter(s -&gt; s.startsWit(<span class=\"string\">&quot;a&quot;</span>) &amp;&amp; s.length() &gt;<span class=\"number\">2</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(res);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//Map集合获取stream流</span></span><br><span class=\"line\">    Map&lt;String,Integer&gt; map1=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map1.put(<span class=\"string\">&quot;zs&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    map1.put(<span class=\"string\">&quot;aca&quot;</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    map1.put(<span class=\"string\">&quot;ww&quot;</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">    map1.put(<span class=\"string\">&quot;ls&quot;</span>,<span class=\"number\">29</span>);</span><br><span class=\"line\">    map1.entrySet().stream().filter(s-&gt;s.getKey().contains(<span class=\"string\">&quot;a&quot;</span>))collect(Collectors.toList()).forEach(System.out::println);</span><br><span class=\"line\">    <span class=\"comment\">//数组获取stream流</span></span><br><span class=\"line\">    String[] selected=&#123;<span class=\"string\">&quot;AB&quot;</span>,<span class=\"string\">&quot;Ba&quot;</span>,<span class=\"string\">&quot;Casd&quot;</span>,<span class=\"string\">&quot;Dwe&quot;</span>&#125;;</span><br><span class=\"line\">    Stream&lt;String&gt; stream = Arrays.stream(selected);</span><br><span class=\"line\">    Stream&lt;String&gt; selected1 = Stream.of(selected);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     Collections.addAll(students,<span class=\"keyword\">new</span> <span class=\"title class_\">student</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;zhangsan&quot;</span>,<span class=\"number\">67</span>),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">student</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;lisi&quot;</span>,<span class=\"number\">23</span>),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">student</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;lisi&quot;</span>,<span class=\"number\">23</span>),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">student</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;we&quot;</span>,<span class=\"number\">54</span>),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">student</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;wqe&quot;</span>,<span class=\"number\">12</span>),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">student</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;znxcj&quot;</span>,<span class=\"number\">30</span>),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">student</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;wmoad&quot;</span>,<span class=\"number\">26</span>),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">student</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;wetyqw&quot;</span>,<span class=\"number\">56</span>));</span><br><span class=\"line\">        <span class=\"comment\">//找出年龄&gt;=23 ,小于30的学生，按照年龄升序排序</span></span><br><span class=\"line\">        students.stream().filter(x-&gt;x.getAge()&gt;=<span class=\"number\">23</span>&amp;&amp;x.getAge()&lt;=<span class=\"number\">30</span>)</span><br><span class=\"line\">                .sorted(Comparator.comparingInt(student::getAge))</span><br><span class=\"line\">                .collect(Collectors.toList())</span><br><span class=\"line\">                .forEach(System.out::println);</span><br><span class=\"line\">        <span class=\"comment\">//取出年龄最大的三位学生</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;======================&quot;</span>);</span><br><span class=\"line\">        students.stream().sorted((t1, t2) -&gt; t2.getAge()-t1.getAge()).limit(<span class=\"number\">3</span>).forEach(System.out::println);</span><br><span class=\"line\">        <span class=\"comment\">//取出年龄最小的两名学生</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;======================&quot;</span>);</span><br><span class=\"line\">        students.stream().sorted((t1, t2) -&gt; t1.getAge()-t2.getAge()).limit(<span class=\"number\">2</span>).forEach(System.out::println);</span><br><span class=\"line\">        <span class=\"comment\">//找出年龄超过20岁的，学生名字去重</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;======================&quot;</span>);</span><br><span class=\"line\">        students.stream().filter(x-&gt;x.getAge()&gt;<span class=\"number\">20</span>).map(s-&gt;s.getName()).distinct().forEach(System.out::println); <span class=\"comment\">//取出名字</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;============================&quot;</span>);</span><br><span class=\"line\">        students.stream().filter(x-&gt;x.getAge()&gt;<span class=\"number\">20</span>).distinct().forEach(System.out::println);</span><br><span class=\"line\">         <span class=\"comment\">//获取最大年龄的对象</span></span><br><span class=\"line\">        System.out.println(students.stream().max((o1, o2) -&gt; o1.getAge() - o2.getAge()).get());</span><br><span class=\"line\">        <span class=\"comment\">//获取超过20岁的人数和</span></span><br><span class=\"line\">        System.out.println(students.stream().filter(s-&gt;s.getAge()&gt;<span class=\"number\">20</span>).count());</span><br><span class=\"line\">        <span class=\"comment\">//找出年龄&gt;=23 ,小于30的学生，按照年龄升序排序,存到一个新集合中</span></span><br><span class=\"line\">        List&lt;student&gt; stu_list = students.stream().filter(x -&gt; x.getAge() &gt;= <span class=\"number\">23</span> &amp;&amp; x.getAge() &lt;= <span class=\"number\">30</span>)</span><br><span class=\"line\">                .sorted(Comparator.comparingInt(student::getAge))</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"comment\">//存到一个新的map集合中 必须手动去重</span></span><br><span class=\"line\">        Map&lt;String, Integer&gt; collect = students.stream().filter(x -&gt; x.getAge() &gt;= <span class=\"number\">23</span> &amp;&amp; x.getAge() &lt;= <span class=\"number\">30</span>)</span><br><span class=\"line\">                .sorted(Comparator.comparingInt(student::getAge))</span><br><span class=\"line\">                .distinct()</span><br><span class=\"line\">                .collect(Collectors.toMap(a -&gt; a.getName(), a -&gt; a.getAge()));</span><br><span class=\"line\">        <span class=\"comment\">//转换成数组</span></span><br><span class=\"line\">        student[] students1 = students.stream()</span><br><span class=\"line\">            .filter(x -&gt; x.getAge() &gt;= <span class=\"number\">23</span>)</span><br><span class=\"line\">            .sorted(Comparator.comparingInt(student::getAge))</span><br><span class=\"line\">            .toArray(len -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">student</span>[len]);    </span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "JAVA",
                "JAVASE"
            ]
        },
        {
            "id": "https://meteora233.github.io/2023/07/05/computer-science/java/javase/JavaSE_Day1/",
            "url": "https://meteora233.github.io/2023/07/05/computer-science/java/javase/JavaSE_Day1/",
            "title": "java面向对象",
            "date_published": "2023-07-04T16:00:00.000Z",
            "content_html": "<p>note info:<strong>查漏补缺</strong><br>第一天复习 课程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUN2NDExMzcybT9wPTExMSZ2ZF9zb3VyY2U9ZWU3NjBiZjdhNGQ4OWQzZWU5MmY0ZjgzZjNhNjgyYzk=\">JAVA 入门基础</span><br>JAVA Object-Oriented Content<br>Welcome to this note, which covers some basic syntax of javaSE.</p>\n<p><strong>课堂笔记</strong></p>\n<h1 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h1><h2 id=\"普通的内部类\"><a href=\"#普通的内部类\" class=\"headerlink\" title=\"普通的内部类\"></a>普通的内部类</h2><p>可以直接访问外部类的实例成员、静态成员</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Outer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String a;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age=<span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"comment\">//成员内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">class</span> <span class=\"title class_\">Inner</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">        <span class=\"keyword\">private</span>  <span class=\"type\">int</span> age=<span class=\"number\">90</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            System.out.println(age);</span><br><span class=\"line\">            System.out.println(a);</span><br><span class=\"line\">            <span class=\"type\">int</span> age=<span class=\"number\">77</span>;</span><br><span class=\"line\">            System.out.println(age);</span><br><span class=\"line\">            System.out.println(<span class=\"built_in\">this</span>.age);</span><br><span class=\"line\">            <span class=\"comment\">//获取外部类变量</span></span><br><span class=\"line\">            System.out.println(Outer.<span class=\"built_in\">this</span>.age);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现创建方法\"><a href=\"#实现创建方法\" class=\"headerlink\" title=\"实现创建方法\"></a>实现创建方法</h2><p>– 成员内部类需要先创建外部对象才能创建内部对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Outer.Inner in=<span class=\"keyword\">new</span> <span class=\"title class_\">Outer</span>().<span class=\"keyword\">new</span> <span class=\"title class_\">Inner</span>();</span><br><span class=\"line\">        in.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h2><p>创建静态内部类对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Outer.<span class=\"type\">Inner</span> <span class=\"variable\">inner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Outer</span>.Inner();</span><br><span class=\"line\">        inner.test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以把静态内部类理解为一个静态方法，**<em>可以直接访问静态的外部成员变量</em>**，但不能直接访问普通成员变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Outer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String schoolName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age=<span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"comment\">//静态内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Inner</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> a=<span class=\"number\">90</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//访问外部类的成员</span></span><br><span class=\"line\">        System.out.println(schoolName);</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">Outer</span>().age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h2><hr>\n<h3 id=\"不使用匿名内部类写法\"><a href=\"#不使用匿名内部类写法\" class=\"headerlink\" title=\"不使用匿名内部类写法\"></a>不使用匿名内部类写法</h3><ol>\n<li>需要先创建一个抽象方法</li>\n<li>再使用一个类继承这个抽象方法来实现</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Aninmal cat=<span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>();</span><br><span class=\"line\">        cat.cry();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">Cat</span> <span class=\"keyword\">extends</span>  <span class=\"title class_\">Aninmal</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cry</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;mmm&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Aninmal</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">cry</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"使用匿名内部类之后\"><a href=\"#使用匿名内部类之后\" class=\"headerlink\" title=\"使用匿名内部类之后\"></a>使用匿名内部类之后</h3><ol>\n<li><strong>匿名内部类本质就是一个子类 并会立即创建出一个子类对象</strong></li>\n<li>通常作为一个参数传输给方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      Animal animal=<span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cry</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">              System.out.println(<span class=\"string\">&quot;ccc&quot;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      animal.cry();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">abstract</span>  <span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">abstract</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">cry</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>实际使用场景</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        go( <span class=\"keyword\">new</span> <span class=\"title class_\">Swimming</span>()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swin</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;猫游泳&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">go</span><span class=\"params\">(Swimming sw)</span>&#123;</span><br><span class=\"line\">        sw.swin();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span>  <span class=\"title class_\">Swimming</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">swin</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><ol>\n<li>枚举是一种特殊的类</li>\n<li>枚举类的第一行都是常量记住的都是枚举类的对象</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    X,Y,Z;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        A a1=A.X;</span><br><span class=\"line\">        A[] values = A.values();    <span class=\"comment\">//获取所有的对象</span></span><br><span class=\"line\">        System.out.println(a1.getName());</span><br><span class=\"line\">        System.out.println(a1.ordinal());   <span class=\"comment\">//获得索引</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"枚举使用场景\"><a href=\"#枚举使用场景\" class=\"headerlink\" title=\"枚举使用场景\"></a>枚举使用场景</h2><p>作信息的筛选，约束参数值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        check(Constant.BOY);</span><br><span class=\"line\">        check(Constant.GIRL);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">check</span><span class=\"params\">(Constant flag)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (flag)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> GIRL:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;女生&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span>  BOY:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;男生&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个独立的常量包</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Constant</span> &#123;</span><br><span class=\"line\">    GIRL,BOY;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Lambda-表达式\"><a href=\"#Lambda-表达式\" class=\"headerlink\" title=\"Lambda 表达式\"></a>Lambda 表达式</h1><p>只能简化函数式接口(<strong>是接口，且只有一个抽象方法</strong>)的匿名内部类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        go(()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;游泳ing&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">go</span><span class=\"params\">(Swimming sw)</span>&#123;</span><br><span class=\"line\">        sw.swin();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span>  <span class=\"title class_\">Swimming</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">swin</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JAVA",
                "JAVASE"
            ]
        }
    ]
}