{
    "version": "https://jsonfeed.org/version/1",
    "title": "Luk's Blog • All posts by \"security框架\" tag",
    "description": "",
    "home_page_url": "https://Meteora233.github.io",
    "items": [
        {
            "id": "https://meteora233.github.io/2023/11/30/computer-science/java/springboot/SpringSecurity%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/",
            "url": "https://meteora233.github.io/2023/11/30/computer-science/java/springboot/SpringSecurity%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/",
            "title": "SpringBoot Security",
            "date_published": "2023-11-29T16:00:00.000Z",
            "content_html": "<p>note info<br>课程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXo0NHkxajdXWi8/cD00JnZkX3NvdXJjZT1lZTc2MGJmN2E0ZDg5ZDNlZTkyZjRmODNmM2E2ODJjOQ==\">SpringBootSecurity</span></p>\n<h1 id=\"SpringBoot-Security-框架\"><a href=\"#SpringBoot-Security-框架\" class=\"headerlink\" title=\"SpringBoot Security 框架\"></a>SpringBoot Security 框架</h1>",
            "tags": [
                "JAVA",
                "Security框架"
            ]
        },
        {
            "id": "https://meteora233.github.io/2023/10/06/computer-science/java/springboot/SpringbootSecurity/",
            "url": "https://meteora233.github.io/2023/10/06/computer-science/java/springboot/SpringbootSecurity/",
            "title": "SpringBoot Security",
            "date_published": "2023-10-05T16:00:00.000Z",
            "content_html": "<p>note info<br>课程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXo0NHkxajdXWi8/cD00JnZkX3NvdXJjZT1lZTc2MGJmN2E0ZDg5ZDNlZTkyZjRmODNmM2E2ODJjOQ==\">SpringBootSecurity</span></p>\n<h1 id=\"SpringBoot-Security-框架\"><a href=\"#SpringBoot-Security-框架\" class=\"headerlink\" title=\"SpringBoot Security 框架\"></a>SpringBoot Security 框架</h1><h1 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h1><p>在<strong>Spring Security</strong>的架构设计中，认证<em>Authentication</em>和<strong>授权 Authorization</strong>是分开的，无论使用什么样的认证方式。都不会影响授权，这是两个独立的存在，这种独立带来的好处之一，就是可以非常方便地整合一些外部的解决方案。<br><img data-src=\"/assets/SpringBootSecurity%E6%9E%B6%E6%9E%84.jpg\" alt=\"&quot;会话跟踪技术&quot;\"></p>\n<h1 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h2><p>在 Spring Seourity 中认证是由 AuthenticationManager 接口来负责的，接口定义为:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AuthenticationManager</span> &#123;</span><br><span class=\"line\">    Authentication <span class=\"title function_\">authenticate</span><span class=\"params\">(Authentication authentication)</span><span class=\"keyword\">throws</span> AuthenticationException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>返回 Authentication 表示认证成功</li>\n<li>返回 AuthenticationException 表示认证失败</li>\n</ul>\n<ol>\n<li>AuthenticationManager 主要实现类为 ProviderManager，在 ProviderManager 中管理了众多 AuthenticationProvider 实例。</li>\n<li>在一次完整的认证流程中，Spring Security 允许存在多个 AuthenticationProvider，用来实现多种认证方式，这些 AuthencationProvider 都是由 ProviderManager 进行统一管理的。</li>\n</ol>\n<h2 id=\"Authentication\"><a href=\"#Authentication\" class=\"headerlink\" title=\"Authentication\"></a>Authentication</h2><p>认证以及认证成功的信息主要是由 Authentication 的实现类进行保存的，其接口定义为: Authentication</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Authentication</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Principal</span>，Serializable &#123;</span><br><span class=\"line\">    collection&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">GrantedAuthority</span>&gt; getAuthorities();</span><br><span class=\"line\">    Object <span class=\"title function_\">getcredentials</span><span class=\"params\">()</span>; <span class=\"comment\">//获取用户凭证信息，一般指密码</span></span><br><span class=\"line\">    Object <span class=\"title function_\">getDetails</span><span class=\"params\">( )</span>; <span class=\"comment\">//获取用户详细信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Object <span class=\"title function_\">getPrincipal</span><span class=\"params\">()</span>; <span class=\"comment\">//获取用户身份信息，用户名、用户对象等</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isAuthenticated</span><span class=\"params\">( )</span>; <span class=\"comment\">//用户是否认证成功</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">setAuthenticated</span><span class=\"params\">(<span class=\"type\">boolean</span> isAuthenticated)</span> <span class=\"keyword\">throws</span> IllegalArgumentException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SecurityContextHolder\"><a href=\"#SecurityContextHolder\" class=\"headerlink\" title=\"SecurityContextHolder\"></a>SecurityContextHolder</h2><p><code>SecurityContextHolder</code> 用来获取登录之后用户信息。<br>Spring Security 会将登录用户数据保存在 Session 中。 但是，为了使用方便,Spring Security 在此基础上还做了一些改进，其中最主要的一个变化就是线程绑定。当用户登录成功后,Spring Security 会将登录成功的用户信息保存到 SecurityContextHolder 中。<br><code>SecurityContextHolder</code> 中的数据保存默认是通过 <code>ThreadLocal</code> 来实现的，使用 <code>ThreadLocal</code> 创建的变量只能被当前线程访问，不能被其他线程访问和修改，也就是用户数据和请求线程绑定在一起。当登录请求处理完毕后，Spring Security 会将 <code>SecurityContextHolder</code> 中的数据拿出来保存到 Session 中，同时将 SecurityContexHolder 中的数据清空。以后每当有请求到来时，Spring Security 就会先从 Session 中取出用户登录数据，保存到 <code>SecurityContextHolder</code> 中，方便在该请求的后续处理过程中使用，同时在请求结束时将 SecurityContextHolder 中的数据拿出来保存到 Session 中，然后将 Security<br><code>SecurityContextHolder</code> 中的数据清空。这一策略非常方便用户在 Controller、Service 层以及任何代码中获取当前登录用户数据。</p>\n<h2 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h2><p>当完成认证后，接下来就是授权了。在 SpringSecurity 的授权体系中，有两个关键接口<br><code>AccessDecisionManager</code>(访问决策管理器)，用来决定此次访问是否被允许。</p>\n<h3 id=\"AccessDecisionManager\"><a href=\"#AccessDecisionManager\" class=\"headerlink\" title=\"AccessDecisionManager\"></a>AccessDecisionManager</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decide(Authentication, Object, Collection&lt;ConfigAttribute&gt;): <span class=\"keyword\">void</span></span><br><span class=\"line\"><span class=\"title function_\">supports</span><span class=\"params\">(Class&lt;?&gt;)</span>: <span class=\"type\">boolean</span></span><br><span class=\"line\"><span class=\"title function_\">supports</span><span class=\"params\">(ConfigAttribute)</span>: <span class=\"type\">boolean</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AccessDecisionVoter\"><a href=\"#AccessDecisionVoter\" class=\"headerlink\" title=\"AccessDecisionVoter\"></a>AccessDecisionVoter</h3><p>AccessDecisionVoter(访问决定投票器)，投票器会检查用户是否具备应有的角色，进而投出赞成、反对或者弃权票。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supports(Class&lt;?&gt;): <span class=\"type\">boolean</span></span><br><span class=\"line\"><span class=\"title function_\">supports</span><span class=\"params\">(ConfigAttribute)</span>: <span class=\"type\">boolean</span></span><br><span class=\"line\"><span class=\"title function_\">vote</span><span class=\"params\">(Authentication,s, collection&lt;ConfigAttribute&gt;)</span>: <span class=\"type\">int</span></span><br></pre></td></tr></table></figure>\n\n<p>AccessDecisionVoter 和 AccessDecisionManager 都有众多的实现类，在 AccessDecisionManager 中会换个遍历 AccessDecisionVoter，进而决定是否允许用户访问，因而 AaccesDecisionVoter 和 AccessDecisionManager 两者的关系类似于 AuthenticationProvider 和 ProviderManager 的关系。</p>\n<h3 id=\"ConfigAttribute\"><a href=\"#ConfigAttribute\" class=\"headerlink\" title=\"ConfigAttribute\"></a>ConfigAttribute</h3><p>Configttribute，用来保存授权时的角色信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getAttribute(): String</span><br></pre></td></tr></table></figure>\n\n<p>在 Spring Security 中，用户请求一个资源(通常是一个接口或者一个 Java 方法)需要的角色会被封装成一个 <code>ConfigAttribute</code> 对象.<br>在 ConfigAttribute 中只有一个 getAttribute 方法，该方法返回一个 String 字符串，就是角色的名称。<br>一般来说，角色名称都带有一个 ROLE_前缀，投票器 AccessDecisionVoter 所做的事情，其实就是比较用户所具各的角色和请求某个资源所需的 ConfigAtuibute 之间的关系。</p>\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><p>引入一个依赖会将所有的接口自动保护起来，若未登录将无法调用接口</p>\n<h1 id=\"自定义验证\"><a href=\"#自定义验证\" class=\"headerlink\" title=\"自定义验证\"></a>自定义验证</h1><h2 id=\"自定义资源权限规则\"><a href=\"#自定义资源权限规则\" class=\"headerlink\" title=\"自定义资源权限规则\"></a>自定义资源权限规则</h2><ul>\n<li>&#x2F;index 公共资源</li>\n<li>&#x2F;hello 受保护资源<br>在项目中添加如下配置就可以实现对资源权限规则设定:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebSecurityConfigurer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">       <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">       http.authorizeHttpRequests()    //开启请求权限</span></span><br><span class=\"line\"><span class=\"comment\">               .mvcMatchers( &quot;/login.html&quot;).permitAll() //放行资源在前</span></span><br><span class=\"line\"><span class=\"comment\">               .anyRequest().authenticated()</span></span><br><span class=\"line\"><span class=\"comment\">               .and()</span></span><br><span class=\"line\"><span class=\"comment\">               .formLogin()</span></span><br><span class=\"line\"><span class=\"comment\">               .loginPage(&quot;/login.html&quot;) //用来指定登录界面， 一旦自定义登录页面后必须只能登录url</span></span><br><span class=\"line\"><span class=\"comment\">               .loginProcessingUrl(&quot;/doLogin&quot;) //指定处理登录请求</span></span><br><span class=\"line\"><span class=\"comment\">               .usernameParameter(&quot;username&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">               .passwordParameter(&quot;password&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">               .successHandler(new MyAuthenticationSuccessHandler()) //登录成功时处理，前后端分离的解决方案，返回一个json数据</span></span><br><span class=\"line\"><span class=\"comment\">               .failureHandler(new MyAuthenticationFailedHandler()) //登录失败时处理，前后端分离的解决方案，返回一个json数据</span></span><br><span class=\"line\"><span class=\"comment\">               .and()</span></span><br><span class=\"line\"><span class=\"comment\">               .logout()</span></span><br><span class=\"line\"><span class=\"comment\">//                .logoutUrl(&quot;/logout&quot;) //指定注销登录url</span></span><br><span class=\"line\"><span class=\"comment\">               .logoutRequestMatcher(new OrRequestMatcher(</span></span><br><span class=\"line\"><span class=\"comment\">                       new AntPathRequestMatcher(&quot;/aa&quot;,&quot;GET&quot;),</span></span><br><span class=\"line\"><span class=\"comment\">                       new AntPathRequestMatcher(&quot;/bb&quot;,&quot;POST&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">               ))</span></span><br><span class=\"line\"><span class=\"comment\">               .invalidateHttpSession(true) //默认对话失效</span></span><br><span class=\"line\"><span class=\"comment\">               .clearAuthentication(true) //默认清楚登录凭证</span></span><br><span class=\"line\"><span class=\"comment\">//                .logoutSuccessUrl(&quot;/login.html&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">               .logoutSuccessHandler(new MyLogoutSuccessHandler()) //注销登录成功后的操作</span></span><br><span class=\"line\"><span class=\"comment\">               .and()</span></span><br><span class=\"line\"><span class=\"comment\">               .csrf().disable(); //禁止csrf跨站请求保护</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       http.authorizeHttpRequests()</span><br><span class=\"line\">               .anyRequest().authenticated()</span><br><span class=\"line\">               .and()</span><br><span class=\"line\">               .formLogin()</span><br><span class=\"line\">               .and()</span><br><span class=\"line\">               .exceptionHandling()</span><br><span class=\"line\">               .authenticationEntryPoint(<span class=\"keyword\">new</span> <span class=\"title class_\">AuthenticationEntryPoint</span>() &#123;</span><br><span class=\"line\">                   <span class=\"meta\">@Override</span></span><br><span class=\"line\">                   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">commence</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">                       response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);</span><br><span class=\"line\">                       response.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class=\"line\">                       response.getWriter().println(<span class=\"string\">&quot;尚未认证&quot;</span>);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">               .and()<span class=\"comment\">//认证异常</span></span><br><span class=\"line\">               .logout()</span><br><span class=\"line\">               .logoutRequestMatcher(<span class=\"keyword\">new</span> <span class=\"title class_\">OrRequestMatcher</span>(</span><br><span class=\"line\">                       <span class=\"keyword\">new</span> <span class=\"title class_\">AntPathRequestMatcher</span>(<span class=\"string\">&quot;/logout&quot;</span>, <span class=\"string\">&quot;GET&quot;</span>),</span><br><span class=\"line\">                       <span class=\"keyword\">new</span> <span class=\"title class_\">AntPathRequestMatcher</span>(<span class=\"string\">&quot;logout&quot;</span>, <span class=\"string\">&quot;post&quot;</span>)</span><br><span class=\"line\">               ))</span><br><span class=\"line\">               .and()</span><br><span class=\"line\">               .csrf().disable();</span><br><span class=\"line\">       ;</span><br><span class=\"line\">       <span class=\"comment\">// at:用来某个filter替换过滤器链中哪个filter</span></span><br><span class=\"line\">       <span class=\"comment\">// before:放在过滤器链中哪个filter之前</span></span><br><span class=\"line\">       <span class=\"comment\">//after:放在过滤器链中那个filter之后</span></span><br><span class=\"line\">       http.addFilterAt(loginFilter(), UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>说明</strong></p>\n<ul>\n<li>permitAl1()代表放行该资源,该资源为公共资源无需认证和授权可以直接访问</li>\n<li>anyRequest().authenticated() 代表所有请求,必须认证之后才能访问</li>\n<li>formLogin(代表开启表单认证)<br>注意:故行资源必须故在所有认证请求之前!</li>\n</ul>\n<h2 id=\"自定义登录界面\"><a href=\"#自定义登录界面\" class=\"headerlink\" title=\"自定义登录界面\"></a>自定义登录界面</h2><ul>\n<li>引入模板依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- thymeleaf --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在 templates 文件夹下创建</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>LOGIN<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/doLogin&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">      用户名<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;uname&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;uname&quot;</span> /&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">      密码<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;password&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;登录&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建一个新的 controller</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/login.html&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  String <span class=\"title function_\">login</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自定义成功响应</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAuthenticationSuccessHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthenticationSuccessHandler</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onAuthenticationSuccess</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;msg&quot;</span>,<span class=\"string\">&quot;登录成功&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;code&quot;</span>,<span class=\"number\">200</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;authentication&quot;</span>,authentication);</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>().writeValueAsString(map);</span><br><span class=\"line\">        response.getWriter().println(s);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>自定义失败响应</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAuthenticationFailedHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthenticationFailureHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onAuthenticationFailure</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        result.put(<span class=\"string\">&quot;msg&quot;</span>,<span class=\"string\">&quot;登录失败&quot;</span>);</span><br><span class=\"line\">        result.put(<span class=\"string\">&quot;code&quot;</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>().writeValueAsString(result);</span><br><span class=\"line\">        response.getWriter().println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注销登录\"><a href=\"#注销登录\" class=\"headerlink\" title=\"注销登录\"></a>注销登录</h2><p>Spring Security 中也提供了默认的 住下登录配置，在开发中也可以按照自己的需求对注销进行个性化定制</p>\n<ul>\n<li>开启注销登录<code>默认开启</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebSecurityConfigurer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">              ...</span><br><span class=\"line\">                .and()</span><br><span class=\"line\">                .logout()</span><br><span class=\"line\">                .logoutUrl(<span class=\"string\">&quot;/logout&quot;</span>) <span class=\"comment\">//指定注销登录url</span></span><br><span class=\"line\">                .invalidateHttpSession(<span class=\"literal\">true</span>) <span class=\"comment\">//默认对话失效</span></span><br><span class=\"line\">                .clearAuthentication(<span class=\"literal\">true</span>) <span class=\"comment\">//默认清楚登录凭证</span></span><br><span class=\"line\">                .logoutSuccessUrl(<span class=\"string\">&quot;/login.html&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"自定义认证数据源\"><a href=\"#自定义认证数据源\" class=\"headerlink\" title=\"自定义认证数据源\"></a>自定义认证数据源</h1><h2 id=\"配置全局-AuthenticationManager\"><a href=\"#配置全局-AuthenticationManager\" class=\"headerlink\" title=\"配置全局 AuthenticationManager\"></a>配置全局 AuthenticationManager</h2><ul>\n<li>默认全局的 AuthenticationManager<br>springboot 对 security 进行自动配置时自动在工厂创建一个全局 AuthenticationManager</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//springboot 对security默认配置，在工厂中默认创建AuthenticationManager</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initialize</span><span class=\"params\">(AuthenticationManagerBuilder builder)</span><span class=\"keyword\">throws</span>  Exception&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;默认配置&quot;</span>+builder);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>默认自动配置全局 AuthenticationManager 默认找当前项目中是否存在自定义的 UserDetailsService 实例自动讲当前项目 UserDetailsService 实例设为数据源</li>\n<li>默认自动配置全局 AuthenticationManager 在工厂中使用直接在代码中注入即可</li>\n</ol>\n<h2 id=\"自定义全局-AuthenticationManager\"><a href=\"#自定义全局-AuthenticationManager\" class=\"headerlink\" title=\"自定义全局 AuthenticationManager\"></a>自定义全局 AuthenticationManager</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> UserDetailsService <span class=\"title function_\">userDetailsService</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">InMemoryUserDetailsManager</span> <span class=\"variable\">userDetailsManager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryUserDetailsManager</span>();</span><br><span class=\"line\">      userDetailsManager.createUser(User.withUsername(<span class=\"string\">&quot;aaa&quot;</span>).password(<span class=\"string\">&quot;&#123;noop&#125;123&quot;</span>).roles(<span class=\"string\">&quot;admin&quot;</span>).build());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> userDetailsManager;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(AuthenticationManagerBuilder builder)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;自定义AuthenticationManager&quot;</span>+builder);</span><br><span class=\"line\">      builder.userDetailsService(userDetailsService());</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 作用：用来在自定义AuthenticationManager在工厂中进行暴露，可以在任何位置注入</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManagerBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.authenticationManagerBean();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>一旦通过 configure 方法自定义 AuthenticationManager 实现就回将工厂中自动配置 AuthenticationManager 进行覆盖</li>\n<li>一旦通过 configure 方法自定义 AuthenticationManager 实现需要在实现中指定认证数据源对象 UserDetaiService 实例</li>\n<li>一旦通过 configure 方法自定义 AuthenticationManager 这种方式创建的 AuthenticationManager 对象工厂内部本地一个 AuthenticationManager 对象，不允许在其他自定义组件中进行注入</li>\n</ol>\n<ul>\n<li>自定义内存数据源</li>\n</ul>\n",
            "tags": [
                "JAVA",
                "security框架"
            ]
        }
    ]
}