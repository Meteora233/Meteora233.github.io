{
    "version": "https://jsonfeed.org/version/1",
    "title": "Luk's Blog • All posts by \"springboot\" category",
    "description": "",
    "home_page_url": "https://Meteora233.github.io",
    "items": [
        {
            "id": "https://meteora233.github.io/2023/10/06/computer-science/java/springboot/SpringbootSecurity/",
            "url": "https://meteora233.github.io/2023/10/06/computer-science/java/springboot/SpringbootSecurity/",
            "title": "SpringBoot Security框架",
            "date_published": "2023-10-05T16:00:00.000Z",
            "content_html": "<p>note info<br>课程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXo0NHkxajdXWi8/cD00JnZkX3NvdXJjZT1lZTc2MGJmN2E0ZDg5ZDNlZTkyZjRmODNmM2E2ODJjOQ==\">SpringBootSecurity</span></p>\n<h1 id=\"SpringBoot-Security-框架\"><a href=\"#SpringBoot-Security-框架\" class=\"headerlink\" title=\"SpringBoot Security 框架\"></a>SpringBoot Security 框架</h1><h1 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h1><p>在<strong>Spring Security</strong>的架构设计中，认证<em>Authentication</em>和<strong>授权 Authorization</strong>是分开的，无论使用什么样的认证方式。都不会影响授权，这是两个独立的存在，这种独立带来的好处之一，就是可以非常方便地整合一些外部的解决方案。</p>\n<!-- ![\"会话跟踪技术\"](./assets/SpringBootSecurity架构.jpg) -->\n<p><img data-src=\"/assets/img5.jpg\"></p>\n<h1 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h2><p>在 Spring Seourity 中认证是由 AuthenticationManager 接口来负责的，接口定义为:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AuthenticationManager</span> &#123;</span><br><span class=\"line\">    Authentication <span class=\"title function_\">authenticate</span><span class=\"params\">(Authentication authentication)</span><span class=\"keyword\">throws</span> AuthenticationException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>返回 Authentication 表示认证成功</li>\n<li>返回 AuthenticationException 表示认证失败</li>\n</ul>\n<ol>\n<li>AuthenticationManager 主要实现类为 ProviderManager，在 ProviderManager 中管理了众多 AuthenticationProvider 实例。</li>\n<li>在一次完整的认证流程中，Spring Security 允许存在多个 AuthenticationProvider，用来实现多种认证方式，这些 AuthencationProvider 都是由 ProviderManager 进行统一管理的。</li>\n</ol>\n<h2 id=\"Authentication\"><a href=\"#Authentication\" class=\"headerlink\" title=\"Authentication\"></a>Authentication</h2><p>认证以及认证成功的信息主要是由 Authentication 的实现类进行保存的，其接口定义为: Authentication</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Authentication</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Principal</span>，Serializable &#123;</span><br><span class=\"line\">    collection&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">GrantedAuthority</span>&gt; getAuthorities();</span><br><span class=\"line\">    Object <span class=\"title function_\">getcredentials</span><span class=\"params\">()</span>; <span class=\"comment\">//获取用户凭证信息，一般指密码</span></span><br><span class=\"line\">    Object <span class=\"title function_\">getDetails</span><span class=\"params\">( )</span>; <span class=\"comment\">//获取用户详细信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Object <span class=\"title function_\">getPrincipal</span><span class=\"params\">()</span>; <span class=\"comment\">//获取用户身份信息，用户名、用户对象等</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isAuthenticated</span><span class=\"params\">( )</span>; <span class=\"comment\">//用户是否认证成功</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">setAuthenticated</span><span class=\"params\">(<span class=\"type\">boolean</span> isAuthenticated)</span> <span class=\"keyword\">throws</span> IllegalArgumentException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SecurityContextHolder\"><a href=\"#SecurityContextHolder\" class=\"headerlink\" title=\"SecurityContextHolder\"></a>SecurityContextHolder</h2><p><code>SecurityContextHolder</code> 用来获取登录之后用户信息。<br>Spring Security 会将登录用户数据保存在 Session 中。 但是，为了使用方便,Spring Security 在此基础上还做了一些改进，其中最主要的一个变化就是线程绑定。当用户登录成功后,Spring Security 会将登录成功的用户信息保存到 SecurityContextHolder 中。<br><code>SecurityContextHolder</code> 中的数据保存默认是通过 <code>ThreadLocal</code> 来实现的，使用 <code>ThreadLocal</code> 创建的变量只能被当前线程访问，不能被其他线程访问和修改，也就是用户数据和请求线程绑定在一起。当登录请求处理完毕后，Spring Security 会将 <code>SecurityContextHolder</code> 中的数据拿出来保存到 Session 中，同时将 SecurityContexHolder 中的数据清空。以后每当有请求到来时，Spring Security 就会先从 Session 中取出用户登录数据，保存到 <code>SecurityContextHolder</code> 中，方便在该请求的后续处理过程中使用，同时在请求结束时将 SecurityContextHolder 中的数据拿出来保存到 Session 中，然后将 Security<br><code>SecurityContextHolder</code> 中的数据清空。这一策略非常方便用户在 Controller、Service 层以及任何代码中获取当前登录用户数据。</p>\n<h2 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h2><p>当完成认证后，接下来就是授权了。在 SpringSecurity 的授权体系中，有两个关键接口<br><code>AccessDecisionManager</code>(访问决策管理器)，用来决定此次访问是否被允许。</p>\n<h3 id=\"AccessDecisionManager\"><a href=\"#AccessDecisionManager\" class=\"headerlink\" title=\"AccessDecisionManager\"></a>AccessDecisionManager</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decide(Authentication, Object, Collection&lt;ConfigAttribute&gt;): <span class=\"keyword\">void</span></span><br><span class=\"line\"><span class=\"title function_\">supports</span><span class=\"params\">(Class&lt;?&gt;)</span>: <span class=\"type\">boolean</span></span><br><span class=\"line\"><span class=\"title function_\">supports</span><span class=\"params\">(ConfigAttribute)</span>: <span class=\"type\">boolean</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AccessDecisionVoter\"><a href=\"#AccessDecisionVoter\" class=\"headerlink\" title=\"AccessDecisionVoter\"></a>AccessDecisionVoter</h3><p>AccessDecisionVoter(访问决定投票器)，投票器会检查用户是否具备应有的角色，进而投出赞成、反对或者弃权票。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supports(Class&lt;?&gt;): <span class=\"type\">boolean</span></span><br><span class=\"line\"><span class=\"title function_\">supports</span><span class=\"params\">(ConfigAttribute)</span>: <span class=\"type\">boolean</span></span><br><span class=\"line\"><span class=\"title function_\">vote</span><span class=\"params\">(Authentication,s, collection&lt;ConfigAttribute&gt;)</span>: <span class=\"type\">int</span></span><br></pre></td></tr></table></figure>\n\n<p>AccessDecisionVoter 和 AccessDecisionManager 都有众多的实现类，在 AccessDecisionManager 中会换个遍历 AccessDecisionVoter，进而决定是否允许用户访问，因而 AaccesDecisionVoter 和 AccessDecisionManager 两者的关系类似于 AuthenticationProvider 和 ProviderManager 的关系。</p>\n<h3 id=\"ConfigAttribute\"><a href=\"#ConfigAttribute\" class=\"headerlink\" title=\"ConfigAttribute\"></a>ConfigAttribute</h3><p>Configttribute，用来保存授权时的角色信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getAttribute(): String</span><br></pre></td></tr></table></figure>\n\n<p>在 Spring Security 中，用户请求一个资源(通常是一个接口或者一个 Java 方法)需要的角色会被封装成一个 <code>ConfigAttribute</code> 对象.<br>在 ConfigAttribute 中只有一个 getAttribute 方法，该方法返回一个 String 字符串，就是角色的名称。<br>一般来说，角色名称都带有一个 ROLE_前缀，投票器 AccessDecisionVoter 所做的事情，其实就是比较用户所具各的角色和请求某个资源所需的 ConfigAtuibute 之间的关系。</p>\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><p>引入一个依赖会将所有的接口自动保护起来，若未登录将无法调用接口</p>\n<h1 id=\"自定义验证\"><a href=\"#自定义验证\" class=\"headerlink\" title=\"自定义验证\"></a>自定义验证</h1><h2 id=\"自定义资源权限规则\"><a href=\"#自定义资源权限规则\" class=\"headerlink\" title=\"自定义资源权限规则\"></a>自定义资源权限规则</h2><ul>\n<li>&#x2F;index 公共资源</li>\n<li>&#x2F;hello 受保护资源<br>在项目中添加如下配置就可以实现对资源权限规则设定:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebSecurityConfigurer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">       <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">       http.authorizeHttpRequests()    //开启请求权限</span></span><br><span class=\"line\"><span class=\"comment\">               .mvcMatchers( &quot;/login.html&quot;).permitAll() //放行资源在前</span></span><br><span class=\"line\"><span class=\"comment\">               .anyRequest().authenticated()</span></span><br><span class=\"line\"><span class=\"comment\">               .and()</span></span><br><span class=\"line\"><span class=\"comment\">               .formLogin()</span></span><br><span class=\"line\"><span class=\"comment\">               .loginPage(&quot;/login.html&quot;) //用来指定登录界面， 一旦自定义登录页面后必须只能登录url</span></span><br><span class=\"line\"><span class=\"comment\">               .loginProcessingUrl(&quot;/doLogin&quot;) //指定处理登录请求</span></span><br><span class=\"line\"><span class=\"comment\">               .usernameParameter(&quot;username&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">               .passwordParameter(&quot;password&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">               .successHandler(new MyAuthenticationSuccessHandler()) //登录成功时处理，前后端分离的解决方案，返回一个json数据</span></span><br><span class=\"line\"><span class=\"comment\">               .failureHandler(new MyAuthenticationFailedHandler()) //登录失败时处理，前后端分离的解决方案，返回一个json数据</span></span><br><span class=\"line\"><span class=\"comment\">               .and()</span></span><br><span class=\"line\"><span class=\"comment\">               .logout()</span></span><br><span class=\"line\"><span class=\"comment\">//                .logoutUrl(&quot;/logout&quot;) //指定注销登录url</span></span><br><span class=\"line\"><span class=\"comment\">               .logoutRequestMatcher(new OrRequestMatcher(</span></span><br><span class=\"line\"><span class=\"comment\">                       new AntPathRequestMatcher(&quot;/aa&quot;,&quot;GET&quot;),</span></span><br><span class=\"line\"><span class=\"comment\">                       new AntPathRequestMatcher(&quot;/bb&quot;,&quot;POST&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">               ))</span></span><br><span class=\"line\"><span class=\"comment\">               .invalidateHttpSession(true) //默认对话失效</span></span><br><span class=\"line\"><span class=\"comment\">               .clearAuthentication(true) //默认清楚登录凭证</span></span><br><span class=\"line\"><span class=\"comment\">//                .logoutSuccessUrl(&quot;/login.html&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">               .logoutSuccessHandler(new MyLogoutSuccessHandler()) //注销登录成功后的操作</span></span><br><span class=\"line\"><span class=\"comment\">               .and()</span></span><br><span class=\"line\"><span class=\"comment\">               .csrf().disable(); //禁止csrf跨站请求保护</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       http.authorizeHttpRequests()</span><br><span class=\"line\">               .anyRequest().authenticated()</span><br><span class=\"line\">               .and()</span><br><span class=\"line\">               .formLogin()</span><br><span class=\"line\">               .and()</span><br><span class=\"line\">               .exceptionHandling()</span><br><span class=\"line\">               .authenticationEntryPoint(<span class=\"keyword\">new</span> <span class=\"title class_\">AuthenticationEntryPoint</span>() &#123;</span><br><span class=\"line\">                   <span class=\"meta\">@Override</span></span><br><span class=\"line\">                   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">commence</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">                       response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);</span><br><span class=\"line\">                       response.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class=\"line\">                       response.getWriter().println(<span class=\"string\">&quot;尚未认证&quot;</span>);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">               .and()<span class=\"comment\">//认证异常</span></span><br><span class=\"line\">               .logout()</span><br><span class=\"line\">               .logoutRequestMatcher(<span class=\"keyword\">new</span> <span class=\"title class_\">OrRequestMatcher</span>(</span><br><span class=\"line\">                       <span class=\"keyword\">new</span> <span class=\"title class_\">AntPathRequestMatcher</span>(<span class=\"string\">&quot;/logout&quot;</span>, <span class=\"string\">&quot;GET&quot;</span>),</span><br><span class=\"line\">                       <span class=\"keyword\">new</span> <span class=\"title class_\">AntPathRequestMatcher</span>(<span class=\"string\">&quot;logout&quot;</span>, <span class=\"string\">&quot;post&quot;</span>)</span><br><span class=\"line\">               ))</span><br><span class=\"line\">               .and()</span><br><span class=\"line\">               .csrf().disable();</span><br><span class=\"line\">       ;</span><br><span class=\"line\">       <span class=\"comment\">// at:用来某个filter替换过滤器链中哪个filter</span></span><br><span class=\"line\">       <span class=\"comment\">// before:放在过滤器链中哪个filter之前</span></span><br><span class=\"line\">       <span class=\"comment\">//after:放在过滤器链中那个filter之后</span></span><br><span class=\"line\">       http.addFilterAt(loginFilter(), UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>说明</strong></p>\n<ul>\n<li>permitAl1()代表放行该资源,该资源为公共资源无需认证和授权可以直接访问</li>\n<li>anyRequest().authenticated() 代表所有请求,必须认证之后才能访问</li>\n<li>formLogin(代表开启表单认证)<br>注意:故行资源必须故在所有认证请求之前!</li>\n</ul>\n<h2 id=\"自定义登录界面\"><a href=\"#自定义登录界面\" class=\"headerlink\" title=\"自定义登录界面\"></a>自定义登录界面</h2><ul>\n<li>引入模板依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- thymeleaf --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在 templates 文件夹下创建</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>LOGIN<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/doLogin&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">      用户名<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;uname&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;uname&quot;</span> /&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">      密码<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;password&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;登录&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建一个新的 controller</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/login.html&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  String <span class=\"title function_\">login</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自定义成功响应</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAuthenticationSuccessHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthenticationSuccessHandler</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onAuthenticationSuccess</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;msg&quot;</span>,<span class=\"string\">&quot;登录成功&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;code&quot;</span>,<span class=\"number\">200</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;authentication&quot;</span>,authentication);</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>().writeValueAsString(map);</span><br><span class=\"line\">        response.getWriter().println(s);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>自定义失败响应</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAuthenticationFailedHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthenticationFailureHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onAuthenticationFailure</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        result.put(<span class=\"string\">&quot;msg&quot;</span>,<span class=\"string\">&quot;登录失败&quot;</span>);</span><br><span class=\"line\">        result.put(<span class=\"string\">&quot;code&quot;</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>().writeValueAsString(result);</span><br><span class=\"line\">        response.getWriter().println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注销登录\"><a href=\"#注销登录\" class=\"headerlink\" title=\"注销登录\"></a>注销登录</h2><p>Spring Security 中也提供了默认的 住下登录配置，在开发中也可以按照自己的需求对注销进行个性化定制</p>\n<ul>\n<li>开启注销登录<code>默认开启</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebSecurityConfigurer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">              ...</span><br><span class=\"line\">                .and()</span><br><span class=\"line\">                .logout()</span><br><span class=\"line\">                .logoutUrl(<span class=\"string\">&quot;/logout&quot;</span>) <span class=\"comment\">//指定注销登录url</span></span><br><span class=\"line\">                .invalidateHttpSession(<span class=\"literal\">true</span>) <span class=\"comment\">//默认对话失效</span></span><br><span class=\"line\">                .clearAuthentication(<span class=\"literal\">true</span>) <span class=\"comment\">//默认清楚登录凭证</span></span><br><span class=\"line\">                .logoutSuccessUrl(<span class=\"string\">&quot;/login.html&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"自定义认证数据源\"><a href=\"#自定义认证数据源\" class=\"headerlink\" title=\"自定义认证数据源\"></a>自定义认证数据源</h1><h2 id=\"配置全局-AuthenticationManager\"><a href=\"#配置全局-AuthenticationManager\" class=\"headerlink\" title=\"配置全局 AuthenticationManager\"></a>配置全局 AuthenticationManager</h2><ul>\n<li>默认全局的 AuthenticationManager<br>springboot 对 security 进行自动配置时自动在工厂创建一个全局 AuthenticationManager</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//springboot 对security默认配置，在工厂中默认创建AuthenticationManager</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initialize</span><span class=\"params\">(AuthenticationManagerBuilder builder)</span><span class=\"keyword\">throws</span>  Exception&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;默认配置&quot;</span>+builder);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>默认自动配置全局 AuthenticationManager 默认找当前项目中是否存在自定义的 UserDetailsService 实例自动讲当前项目 UserDetailsService 实例设为数据源</li>\n<li>默认自动配置全局 AuthenticationManager 在工厂中使用直接在代码中注入即可</li>\n</ol>\n<h2 id=\"自定义全局-AuthenticationManager\"><a href=\"#自定义全局-AuthenticationManager\" class=\"headerlink\" title=\"自定义全局 AuthenticationManager\"></a>自定义全局 AuthenticationManager</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> UserDetailsService <span class=\"title function_\">userDetailsService</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">InMemoryUserDetailsManager</span> <span class=\"variable\">userDetailsManager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryUserDetailsManager</span>();</span><br><span class=\"line\">      userDetailsManager.createUser(User.withUsername(<span class=\"string\">&quot;aaa&quot;</span>).password(<span class=\"string\">&quot;&#123;noop&#125;123&quot;</span>).roles(<span class=\"string\">&quot;admin&quot;</span>).build());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> userDetailsManager;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(AuthenticationManagerBuilder builder)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;自定义AuthenticationManager&quot;</span>+builder);</span><br><span class=\"line\">      builder.userDetailsService(userDetailsService());</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 作用：用来在自定义AuthenticationManager在工厂中进行暴露，可以在任何位置注入</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManagerBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.authenticationManagerBean();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>一旦通过 configure 方法自定义 AuthenticationManager 实现就回将工厂中自动配置 AuthenticationManager 进行覆盖</li>\n<li>一旦通过 configure 方法自定义 AuthenticationManager 实现需要在实现中指定认证数据源对象 UserDetaiService 实例</li>\n<li>一旦通过 configure 方法自定义 AuthenticationManager 这种方式创建的 AuthenticationManager 对象工厂内部本地一个 AuthenticationManager 对象，不允许在其他自定义组件中进行注入</li>\n</ol>\n<ul>\n<li>自定义内存数据源</li>\n</ul>\n",
            "tags": [
                "JAVA",
                "security框架"
            ]
        },
        {
            "id": "https://meteora233.github.io/2023/08/01/computer-science/java/springboot/Day3/",
            "url": "https://meteora233.github.io/2023/08/01/computer-science/java/springboot/Day3/",
            "title": "SpringBoot",
            "date_published": "2023-07-31T16:00:00.000Z",
            "content_html": "<h1 id=\"Spring-事务管理\"><a href=\"#Spring-事务管理\" class=\"headerlink\" title=\"Spring 事务管理\"></a>Spring 事务管理</h1><h2 id=\"rollbackFor\"><a href=\"#rollbackFor\" class=\"headerlink\" title=\"rollbackFor\"></a>rollbackFor</h2><p>默认情况下，只有出现 RuntimeException 才回滚异常。rollbackFor 属性用于控制出现何种异常类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional(rollbackFor = Exception.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">deleteDept</span><span class=\"params\">(Integer id)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> deptMapper.deleteById(id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">throw</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">Exception</span>(<span class=\"string\">&quot;错误&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">res1</span> <span class=\"operator\">=</span> empMapper.deleteEmpByDept(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  res!=<span class=\"number\">0</span>&amp;&amp;res1!=<span class=\"number\">0</span>?<span class=\"number\">1</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//设置日志</span></span><br><span class=\"line\">logging.level.org.springframework.jdbc.core.JdbcTemplate=debug</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"propagation\"><a href=\"#propagation\" class=\"headerlink\" title=\"propagation\"></a>propagation</h2><p>事务传播行为：指的是当一个事务方法被另一个事务方法调用时，这个事务方法如何进行事务控制</p>\n<h3 id=\"事务属性-传播行为\"><a href=\"#事务属性-传播行为\" class=\"headerlink\" title=\"事务属性-传播行为\"></a>事务属性-传播行为</h3><table>\n<thead>\n<tr>\n<th align=\"left\">属性值</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">REQUIRED</td>\n<td align=\"left\">【默认值】需要事务，有则加入，无则创建新事务</td>\n</tr>\n<tr>\n<td align=\"left\">REQUIRES_NEW</td>\n<td align=\"left\">需要新事务，无论有无，总是创建新事务</td>\n</tr>\n<tr>\n<td align=\"left\">SUPPORTS</td>\n<td align=\"left\">支持事务，有则加入，无则在无事务状态中运行</td>\n</tr>\n<tr>\n<td align=\"left\">NOT_SUPPORTED</td>\n<td align=\"left\">不支持事务，在无事务状态下运行,如果当前存在已有事务,则挂起当前</td>\n</tr>\n<tr>\n<td align=\"left\">MANDATORY</td>\n<td align=\"left\">必须有事务，否则抛异常</td>\n</tr>\n<tr>\n<td align=\"left\">NEVER</td>\n<td align=\"left\">必须没事务，否则抛异常</td>\n</tr>\n</tbody></table>\n<h1 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h1><p>场景<br>记录操作日志-&gt; 权限控制-&gt; 事务处理-&gt;</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span>  <span class=\"comment\">//IOC</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span>     <span class=\"comment\">//AOP</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeAspect</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(* com.example.demo1.Service.*.*(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;execution(* com.example.demo1.Service.*.*(..))&quot;)</span> <span class=\"comment\">//切入点表达式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  Object <span class=\"title function_\">recordTime</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 记录开始时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">begin</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"comment\">//调用原始方法运行</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> joinPoint.proceed();</span><br><span class=\"line\">        <span class=\"comment\">//记录结束时间</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(joinPoint.getSignature()+<span class=\"string\">&quot;方法执行时间&#123;&#125;&quot;</span>,end-begin);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>  result;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AOP-核心概念\"><a href=\"#AOP-核心概念\" class=\"headerlink\" title=\"AOP 核心概念\"></a>AOP 核心概念</h2><ol>\n<li>连接点:JoinPoint,可以被 AOP 控制的方法（暗指方法执行时的相关信息）</li>\n<li>通知:Advice,指的哪些重复的逻辑，也就是共性功能（最终体现为一个方法）</li>\n<li>切入点: Pointcut，匹配连接点的条件，通知仅会在切入点方法执行时被应用</li>\n</ol>\n<h2 id=\"Conditional\"><a href=\"#Conditional\" class=\"headerlink\" title=\"@Conditional\"></a>@Conditional</h2><p>我们在跟踪 SpringBoot 自动配置的源码的时候，在自动配置类声明 bean 的时候，除了在方法上加了一个@Bean 注解以外，还会经常用到一个注解，就是以 Conditional 开头的这一类的注解。以 Conditional 开头的这些注解都是条件装配的注解。下面我们就来介绍下条件装配注解。</p>\n<p>@Conditional 注解：</p>\n<ul>\n<li>作用：按照一定的条件进行判断，在满足给定条件后才会注册对应的 bean 对象到 Spring 的 IOC 容器中。</li>\n<li>位置：方法、类</li>\n<li>@Conditional 本身是一个父注解，派生出大量的子注解：<ul>\n<li>@ConditionalOnClass：判断环境中有对应字节码文件，才注册 bean 到 IOC 容器。</li>\n<li>@ConditionalOnMissingBean：判断环境中没有对应的 bean(类型或名称)，才注册 bean 到 IOC 容器。</li>\n<li>@ConditionalOnProperty：判断配置文件中有对应属性和值，才注册 bean 到 IOC 容器。</li>\n</ul>\n</li>\n</ul>\n<p>下面我们通过代码来演示下 Conditional 注解的使用：</p>\n<ul>\n<li>@ConditionalOnClass 注解</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeaderConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnClass(name=&quot;io.jsonwebtoken.Jwts&quot;)</span><span class=\"comment\">//环境中存在指定的这个类，才会将该bean加入IOC容器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HeaderParser <span class=\"title function_\">headerParser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HeaderParser</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//省略其他代码...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pom.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--JWT令牌--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.jsonwebtoken<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jjwt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.9.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>测试类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AutoConfigurationTests</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testHeaderParser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(applicationContext.getBean(HeaderParser.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//省略其他代码...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>因为 io.jsonwebtoken.Jwts 字节码文件在启动 SpringBoot 程序时已存在，所以创建 HeaderParser 对象并注册到 IOC 容器中。</p>\n</blockquote>\n<ul>\n<li>@ConditionalOnMissingBean 注解</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeaderConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span> <span class=\"comment\">//不存在该类型的bean，才会将该bean加入IOC容器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HeaderParser <span class=\"title function_\">headerParser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HeaderParser</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//省略其他代码...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>执行 testHeaderParser()测试方法：</p>\n<p><img data-src=\"/assets/image-20230115211029855.png\" alt=\"image-20230115211029855\"></p>\n<p>SpringBoot 在调用@Bean 标识的 headerParser()前，IOC 容器中是没有 HeaderParser 类型的 bean，所以 HeaderParser 对象正常创建，并注册到 IOC 容器中。</p>\n</blockquote>\n<p>再次修改@ConditionalOnMissingBean 注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeaderConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean(name=&quot;deptController2&quot;)</span><span class=\"comment\">//不存在指定名称的bean，才会将该bean加入IOC容器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HeaderParser <span class=\"title function_\">headerParser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HeaderParser</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//省略其他代码...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>执行 testHeaderParser()测试方法：</p>\n<p><img data-src=\"/assets/image-20230115211351681.png\" alt=\"image-20230115211351681\"></p>\n<p>因为在 SpringBoot 环境中不存在名字叫 deptController2 的 bean 对象，所以创建 HeaderParser 对象并注册到 IOC 容器中。</p>\n</blockquote>\n<p>再次修改@ConditionalOnMissingBean 注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeaderConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean(HeaderConfig.class)</span><span class=\"comment\">//不存在指定类型的bean，才会将bean加入IOC容器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HeaderParser <span class=\"title function_\">headerParser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HeaderParser</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//省略其他代码...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AutoConfigurationTests</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testHeaderParser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(applicationContext.getBean(HeaderParser.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//省略其他代码...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>执行 testHeaderParser()测试方法：</p>\n<p><img data-src=\"/assets/image-20230115211957191.png\" alt=\"image-20230115211957191\"></p>\n<p>因为 HeaderConfig 类中添加@Configuration 注解，而@Configuration 注解中包含了@Component，所以 SpringBoot 启动时会创建 HeaderConfig 类对象，并注册到 IOC 容器中。</p>\n<p>当 IOC 容器中有 HeaderConfig 类型的 bean 存在时，不会把创建 HeaderParser 对象注册到 IOC 容器中。而 IOC 容器中没有 HeaderParser 类型的对象时，通过 getBean(HeaderParser.class)方法获取 bean 对象时，引发异常：NoSuchBeanDefinitionException</p>\n</blockquote>\n<ul>\n<li>@ConditionalOnProperty 注解（这个注解和配置文件当中配置的属性有关系）</li>\n</ul>\n<p>先在 application.yml 配置文件中添加如下的键值对：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">itheima</span></span><br></pre></td></tr></table></figure>\n\n<p>在声明 bean 的时候就可以指定一个条件@ConditionalOnProperty</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeaderConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnProperty(name =&quot;name&quot;,havingValue = &quot;itheima&quot;)</span><span class=\"comment\">//配置文件中存在指定属性名与值，才会将bean加入IOC容器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HeaderParser <span class=\"title function_\">headerParser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HeaderParser</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HeaderGenerator <span class=\"title function_\">headerGenerator</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HeaderGenerator</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>执行 testHeaderParser()测试方法：</p>\n<p><img data-src=\"/assets/image-20230115220235511.png\" alt=\"image-20230115220235511\"></p>\n</blockquote>\n<p>修改@ConditionalOnProperty 注解： havingValue 的值修改为”itheima2”</p>\n<h1 id=\"maven\"><a href=\"#maven\" class=\"headerlink\" title=\"maven\"></a>maven</h1><h2 id=\"继承关系实现\"><a href=\"#继承关系实现\" class=\"headerlink\" title=\"继承关系实现\"></a>继承关系实现</h2><h3 id=\"继承关系\"><a href=\"#继承关系\" class=\"headerlink\" title=\"继承关系\"></a>继承关系</h3><ol>\n<li>创建 maven 模块的父类 打包成 pom tlias-parent</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itheima<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tlias-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--lombok--&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!-- ... 子工程定义需要的依赖 --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在子工程的 xml 文件里，配置继承关系</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itheima<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tlias-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>&gt;</span>../tlias-parent/pom.xml<span class=\"tag\">&lt;/<span class=\"name\">relativePath</span>&gt;</span>     <span class=\"comment\">&lt;!-- 父工程的相对位置 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itheima<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tlias-pojo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"版本锁定\"><a href=\"#版本锁定\" class=\"headerlink\" title=\"版本锁定\"></a>版本锁定</h3><p>在 maven 中，可以在父工程的 pom 文件中，通过<dependencyManagement>来统一管理依赖版本</dependencyManagement></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">lombok.version</span>&gt;</span>1.18.28<span class=\"tag\">&lt;/<span class=\"name\">lombok.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jwt.version</span>&gt;</span>0.9.1<span class=\"tag\">&lt;/<span class=\"name\">jwt.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.jsonwebtoken<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jjwt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jwt.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a>聚合</h2><p>添加一个标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- tlias-parent --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../tlias-pojo<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../tlias-utils<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../tlias-web-management<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>三个项目分别 install<br>再将三个 module 分别执行 clean 再<br>然后再对 parent 项目进行打包</p>\n",
            "tags": [
                "JAVA",
                "事务"
            ]
        },
        {
            "id": "https://meteora233.github.io/2023/07/14/computer-science/java/springboot/MybatisDay1/",
            "url": "https://meteora233.github.io/2023/07/14/computer-science/java/springboot/MybatisDay1/",
            "title": "SpringBoot",
            "date_published": "2023-07-13T16:00:00.000Z",
            "content_html": "<p>note info:<strong>查漏补缺</strong><br>第一天复习 课程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW04NHkxdzdUYj9wPTExOCZzcG1faWRfZnJvbT1wYWdlRHJpdmVyJnZkX3NvdXJjZT1lZTc2MGJmN2E0ZDg5ZDNlZTkyZjRmODNmM2E2ODJjOQ==\">SpringBoot</span>  </p>\n<h1 id=\"mybatis-快速入门\"><a href=\"#mybatis-快速入门\" class=\"headerlink\" title=\"mybatis 快速入门\"></a>mybatis 快速入门</h1><p>在创建时需要</p>\n<!-- ![项目依赖](assets/springboot项目配置.jpg) -->\n\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"comment\">// 在运行时，会自动生成该接口的实现类对象(代理对象),并且讲该对象交给IOC容器管理</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;select id as ID,username,password,gender,addr from tb_user&quot;)</span></span><br><span class=\"line\">    List&lt;Users&gt; <span class=\"title function_\">selectAll</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/User&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper mapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/index&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">index</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;Users&gt; users = mapper.selectAll();</span><br><span class=\"line\">        System.out.println(users);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  users.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"数据库连接池\"><a href=\"#数据库连接池\" class=\"headerlink\" title=\"数据库连接池\"></a>数据库连接池</h1><ul>\n<li>特点</li>\n</ul>\n<ol>\n<li>数据库连接池是个容器，负责分配、管理数据库连接(Connection)资源重用</li>\n<li>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</li>\n</ol>\n<ul>\n<li>优势</li>\n</ul>\n<ol>\n<li>提升系统响应速度  </li>\n<li>释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏  </li>\n<li>避免数据库连接遗漏</li>\n</ol>\n<h1 id=\"lombok\"><a href=\"#lombok\" class=\"headerlink\" title=\"lombok\"></a>lombok</h1><p>Lombok是一个实用的Java类库，能通过注解的形式自动生成构造器、getter&#x2F;setter、equals、hashcode、toString等方法，并可以自动化生成日志变量，简化java开发、提高效率。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">注解</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">@Getter&#x2F;@Setter</td>\n<td align=\"left\">为所有的属性提供get&#x2F;set方法</td>\n</tr>\n<tr>\n<td align=\"left\">@ToString</td>\n<td align=\"left\">会给类自动生成易阅读的toString方法</td>\n</tr>\n<tr>\n<td align=\"left\">@EqualsAndHashode</td>\n<td align=\"left\">根据类所拥有的非静态字段自动重写equals方法和 hashCode方法</td>\n</tr>\n<tr>\n<td align=\"left\">@Data</td>\n<td align=\"left\">提供了更综合的生成代码功能 <strong>(@Getter +@Setter +@Tostring +@EqualsAndHashCode)</strong></td>\n</tr>\n<tr>\n<td align=\"left\">@NoArgsConstructor</td>\n<td align=\"left\">为实体类生成无参的构造器方法</td>\n</tr>\n<tr>\n<td align=\"left\">@AllArgsConstructor</td>\n<td align=\"left\">为实体类生成除了static修饰的字段之外带有各参数的构造器方法。</td>\n</tr>\n</tbody></table>\n",
            "tags": [
                "JAVA",
                "JAVASE"
            ]
        },
        {
            "id": "https://meteora233.github.io/2023/07/14/computer-science/java/springboot/MybatisDay2/",
            "url": "https://meteora233.github.io/2023/07/14/computer-science/java/springboot/MybatisDay2/",
            "title": "SpringBoot",
            "date_published": "2023-07-13T16:00:00.000Z",
            "content_html": "<p>note info:<strong>查漏补缺</strong><br>课程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW04NHkxdzdUYj9wPTExOCZzcG1faWRfZnJvbT1wYWdlRHJpdmVyJnZkX3NvdXJjZT1lZTc2MGJmN2E0ZDg5ZDNlZTkyZjRmODNmM2E2ODJjOQ==\">SpringBoot</span></p>\n<h1 id=\"Mybatis\"><a href=\"#Mybatis\" class=\"headerlink\" title=\"Mybatis\"></a>Mybatis</h1><h2 id=\"一级缓存\"><a href=\"#一级缓存\" class=\"headerlink\" title=\"一级缓存\"></a>一级缓存</h2><p>解决数据库的压力<br>client -&gt; executor &lt;–&gt; cache &lt;–&gt;DB<br>一级缓存是 SqlSession 级别的，通过同一个 SqlSession 查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问<br>使—级缓存失效的四种情况:</p>\n<ol>\n<li>不同的 SqlSession 对应不同的一级缓存</li>\n<li>同一个 SqlSession 但是查询条件不同</li>\n<li>同一个 SqlSession 两次查询期间执行了任何一次增删改操作</li>\n<li>同一个 SqlSession 两次查询期间手动清空了缓存</li>\n</ol>\n<h2 id=\"二级缓存\"><a href=\"#二级缓存\" class=\"headerlink\" title=\"二级缓存\"></a>二级缓存</h2><p>二级缓存是 SqlSessionFactory 级别，通过同一个 SqlSessionFactory 创建的 SqlSession 查询的结果会被缓存;此后若再次执行相同的查询语句，结果就会从缓存中获取<br>二级缓存开启的条件:<br><cache>在核心配置文件中，设置全局配置属性 cacheEnabled&#x3D;”true”，默认为 true，不需要设置 b&gt;在映射文件中设置标签<cache></cache></cache></p>\n<h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">EmpMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;select count(*) from emp where username=#&#123;username&#125; and password=#&#123;pwd&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"type\">int</span> <span class=\"title function_\">select_user</span><span class=\"params\">(String username,String pwd)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//新增操作</span></span><br><span class=\"line\">    <span class=\"comment\">//useGenratedKeys 需要返回主键，设置返回的值</span></span><br><span class=\"line\">    <span class=\"meta\">@Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) &quot; +</span></span><br><span class=\"line\"><span class=\"meta\">            &quot;values (#&#123;username&#125;,#&#123;name&#125;,#&#123;gender&#125;,#&#123;image&#125;,#&#123;job&#125;,#&#123;entrydate&#125;,#&#123;deptId&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertEmp</span><span class=\"params\">(Emp emp)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据封装\"><a href=\"#数据封装\" class=\"headerlink\" title=\"数据封装\"></a>数据封装</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//    方案一: 给字段起别名, 让别名与实体类属性一致</span></span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;select id, username, password, name, gender, image, job, entrydate, &quot; +</span></span><br><span class=\"line\"><span class=\"meta\">           &quot;dept_id deptId, create_time createTime, update_time updateTime from emp where id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Emp <span class=\"title function_\">getById</span><span class=\"params\">(Integer id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    方案二: 通过@Results, @Result注解手动映射封装</span></span><br><span class=\"line\">    <span class=\"meta\">@Results(&#123;</span></span><br><span class=\"line\"><span class=\"meta\">           @Result(column = &quot;dept_id&quot;, property = &quot;deptId&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">           @Result(column = &quot;create_time&quot;, property = &quot;createTime&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">           @Result(column = &quot;update_time&quot;, property = &quot;updateTime&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;select * from emp where id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Emp <span class=\"title function_\">getById</span><span class=\"params\">(Integer id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;SELECT * from emp WHERE `name` LIKE concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) and gender=#&#123;gender&#125; and entrydate BETWEEN #&#123;begin&#125; and  #&#123;end&#125;  order by update_time desc&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  List&lt;Emp&gt; <span class=\"title function_\">listEmp</span><span class=\"params\">(String name, Short gender, LocalDate begin , LocalDate end)</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"xml-配置文件\"><a href=\"#xml-配置文件\" class=\"headerlink\" title=\"xml 配置文件\"></a>xml 配置文件</h2><ol>\n<li>&lt; if&gt;<br>用于判断条件是否成立，如果条件为 true，则拼接 SQL。形式: &lt; if test&#x3D;”name !&#x3D; null”&gt;…&lt;&#x2F; if&gt;</li>\n<li>&lt; where&gt;<br>where 元素只会在子元素有内容的情况下才插入 where 子句，而且会自动去除子句的开头的 AND 或 OR</li>\n<li>&lt; set&gt;<br>动态地在行首插入 SET 关键字，并会删掉额外的逗号。(用在 update 语句中)</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    动态sql--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectList&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class=\"line\">        select  * from emp</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;name!=null&quot;</span>&gt;</span></span><br><span class=\"line\">                name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;gender!=null&quot;</span>&gt;</span></span><br><span class=\"line\">               and gender=#&#123;gender&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;begin != null and end!=null&quot;</span>&gt;</span></span><br><span class=\"line\">              and  entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        order by entrydate desc</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;update2&quot;</span>&gt;</span></span><br><span class=\"line\">       UPDATE emp</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;username!=null&quot;</span>&gt;</span></span><br><span class=\"line\">            username = #&#123;username&#125;,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;password!=null&quot;</span>&gt;</span></span><br><span class=\"line\">            `password` =  #&#123;password&#125;,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;gender!=null&quot;</span>&gt;</span></span><br><span class=\"line\">            `gender` =  #&#123;gender&#125;,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;image!=null&quot;</span>&gt;</span></span><br><span class=\"line\">            `image` =  #&#123;image&#125;,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;job!=null&quot;</span>&gt;</span></span><br><span class=\"line\">            `job` = #&#123;job&#125;,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;name!=null&quot;</span>&gt;</span></span><br><span class=\"line\">            `name` = #&#123;name&#125;,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">       WHERE `id` =  #&#123;id&#125;;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>&lt; foreach&gt;</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   List<span class=\"tag\">&lt;<span class=\"name\">Integer</span>&gt;</span> ids = Arrays.asList(13, 14, 15);</span><br><span class=\"line\">   empMapper.deleteByIds(ids);</span><br><span class=\"line\">   <span class=\"comment\">&lt;!--    -批量删除员工(18,19,20)</span></span><br><span class=\"line\"><span class=\"comment\">collection:遍历的集合</span></span><br><span class=\"line\"><span class=\"comment\">item:遍历出来的元素</span></span><br><span class=\"line\"><span class=\"comment\">separator:分隔符</span></span><br><span class=\"line\"><span class=\"comment\"> open :遍历开始前拼接的sQL片段</span></span><br><span class=\"line\"><span class=\"comment\"> close:遍历结束后拼接的SQL片段</span></span><br><span class=\"line\"><span class=\"comment\"> --&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!--    delete from emp where id in (18,19,20) --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class=\"line\">       delete from emp where  id in</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;ids&quot;</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;,&quot;</span> <span class=\"attr\">open</span>=<span class=\"string\">&quot;(&quot;</span> <span class=\"attr\">close</span>=<span class=\"string\">&quot;)&quot;</span>&gt;</span></span><br><span class=\"line\">           #&#123;id&#125;</span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>&lt; include&gt; &#x2F; &lt; sql&gt;</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sql</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;commonSelectEmp&quot;</span>&gt;</span></span><br><span class=\"line\">        select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sql</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    引用sql--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectList&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">&quot;commonSelectEmp&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;name!=null&quot;</span>&gt;</span></span><br><span class=\"line\">                name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;gender!=null&quot;</span>&gt;</span></span><br><span class=\"line\">               and gender=#&#123;gender&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;begin != null and end!=null&quot;</span>&gt;</span></span><br><span class=\"line\">              and  entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        order by entrydate desc</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h1><h2 id=\"yarm-配置\"><a href=\"#yarm-配置\" class=\"headerlink\" title=\"yarm 配置\"></a>yarm 配置</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/db_day9</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">lu20031202</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"attr\">multipart:</span></span><br><span class=\"line\">      <span class=\"attr\">max-file-size:</span> <span class=\"string\">10MB</span></span><br><span class=\"line\">      <span class=\"attr\">max-request-size:</span> <span class=\"string\">100MB</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#mybatis 配置</span></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">configuration:</span></span><br><span class=\"line\">    <span class=\"attr\">log-impl:</span> <span class=\"string\">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class=\"line\">    <span class=\"attr\">map-underscore-to-camel-case:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"登录校验\"><a href=\"#登录校验\" class=\"headerlink\" title=\"登录校验\"></a>登录校验</h1><p>http 无状态 每次请求都是独立的，新一次请求不会携带上一次请求的数据<br>存储一个登录标记</p>\n<h2 id=\"会话技术\"><a href=\"#会话技术\" class=\"headerlink\" title=\"会话技术\"></a>会话技术</h2><ol>\n<li>cookies</li>\n<li>session</li>\n<li>令牌<br><img data-src=\"https://s21.ax1x.com/2025/01/30/pEVjIIO.jpg\" alt=\"会话跟踪技术\"></li>\n</ol>\n<h3 id=\"jwt-json-web-token\"><a href=\"#jwt-json-web-token\" class=\"headerlink\" title=\"jwt (json web token)\"></a>jwt (json web token)</h3><ol>\n<li>登陆成功后生成令牌，（返回给浏览器存储）</li>\n<li>后续每个请求携带 jwt 令牌，系统处理请求之前先校验令牌 （令牌存在浏览器中）</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.jsonwebtoken<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jjwt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.9.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JwtUtils</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">signKey</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;itheima&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Long</span> <span class=\"variable\">expire</span> <span class=\"operator\">=</span> <span class=\"number\">43200000L</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成JWT令牌</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> claims JWT第二部分负载 payload 中存储的内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">generateJwt</span><span class=\"params\">(Map&lt;String, Object&gt; claims)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">jwt</span> <span class=\"operator\">=</span> Jwts.builder()</span><br><span class=\"line\">                .signWith(SignatureAlgorithm.HS256, signKey)<span class=\"comment\">//设置签名算法</span></span><br><span class=\"line\">                .setClaims(claims)    <span class=\"comment\">//自定义内容 (载荷)</span></span><br><span class=\"line\">                .setExpiration(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(System.currentTimeMillis() + expire))</span><br><span class=\"line\">                .compact();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jwt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析JWT令牌</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jwt JWT令牌</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> JWT第二部分负载 payload 中存储的内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Claims <span class=\"title function_\">parseJWT</span><span class=\"params\">(String jwt)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Claims</span> <span class=\"variable\">claims</span> <span class=\"operator\">=</span> Jwts.parser()</span><br><span class=\"line\">                .setSigningKey(signKey)</span><br><span class=\"line\">                .parseClaimsJws(jwt)</span><br><span class=\"line\">                .getBody();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> claims;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"intercepter-拦截器\"><a href=\"#intercepter-拦截器\" class=\"headerlink\" title=\"intercepter 拦截器\"></a>intercepter 拦截器</h2><p>写一个配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LoginCheckInterceptor loginCheckInterceptor;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\">        registry.addInterceptor(loginCheckInterceptor).addPathPatterns(<span class=\"string\">&quot;/*&quot;</span>).excludePathPatterns(<span class=\"string\">&quot;/login&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginCheckInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;preHandle...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;postHandle,...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;after...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>拦截路径</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">拦截路径</th>\n<th align=\"left\">含义</th>\n<th align=\"left\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&#x2F;_</td>\n<td align=\"left\">—级路径</td>\n<td align=\"left\">能匹配&#x2F;depts,&#x2F;emps，&#x2F;login，不能匹配&#x2F;depts&#x2F;1</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;**</td>\n<td align=\"left\">任意级路径</td>\n<td align=\"left\">能匹配&#x2F;depts,&#x2F;depts&#x2F;1 ,&#x2F;depts&#x2F;1&#x2F;2</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;depts&#x2F;_</td>\n<td align=\"left\">&#x2F;depts 下的一级路径</td>\n<td align=\"left\">能匹配&#x2F;depts&#x2F;1 ,不能匹配&#x2F;depts&#x2F;1&#x2F;2,&#x2F;depts</td>\n</tr>\n<tr>\n<td align=\"left\">depts&#x2F;**</td>\n<td align=\"left\">&#x2F;depts 下的任意级路径</td>\n<td align=\"left\">能匹配&#x2F;depts,&#x2F;depts&#x2F;1 , &#x2F;depts&#x2F;1&#x2F;2，不能匹配&#x2F;emps&#x2F;1</td>\n</tr>\n</tbody></table>\n",
            "tags": [
                "JAVA",
                "mybatis"
            ]
        }
    ]
}