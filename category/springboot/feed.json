{
    "version": "https://jsonfeed.org/version/1",
    "title": "Luk's Blog • All posts by \"springboot\" category",
    "description": "",
    "home_page_url": "https://Vereatorm.github.io",
    "items": [
        {
            "id": "https://vereatorm.github.io/2023/07/14/computer-science/java/springboot/Day1/",
            "url": "https://vereatorm.github.io/2023/07/14/computer-science/java/springboot/Day1/",
            "title": "SpringBoot",
            "date_published": "2023-07-13T16:00:00.000Z",
            "content_html": "<p>note info:<strong>查漏补缺</strong><br>第一天复习 课程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW04NHkxdzdUYj9wPTExOCZzcG1faWRfZnJvbT1wYWdlRHJpdmVyJnZkX3NvdXJjZT1lZTc2MGJmN2E0ZDg5ZDNlZTkyZjRmODNmM2E2ODJjOQ==\">SpringBoot</span>  </p>\n<h1 id=\"mybatis-快速入门\"><a href=\"#mybatis-快速入门\" class=\"headerlink\" title=\"mybatis 快速入门\"></a>mybatis 快速入门</h1><p>在创建时需要<br><img data-src=\"/assets/springboot%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.jpg\" alt=\"项目依赖\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"comment\">// 在运行时，会自动生成该接口的实现类对象(代理对象),并且讲该对象交给IOC容器管理</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;select id as ID,username,password,gender,addr from tb_user&quot;)</span></span><br><span class=\"line\">    List&lt;Users&gt; <span class=\"title function_\">selectAll</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/User&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper mapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/index&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">index</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;Users&gt; users = mapper.selectAll();</span><br><span class=\"line\">        System.out.println(users);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>  users.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"数据库连接池\"><a href=\"#数据库连接池\" class=\"headerlink\" title=\"数据库连接池\"></a>数据库连接池</h1><ul>\n<li>特点</li>\n</ul>\n<ol>\n<li>数据库连接池是个容器，负责分配、管理数据库连接(Connection)资源重用</li>\n<li>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</li>\n</ol>\n<ul>\n<li>优势</li>\n</ul>\n<ol>\n<li>提升系统响应速度  </li>\n<li>释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏  </li>\n<li>避免数据库连接遗漏</li>\n</ol>\n<h1 id=\"lombok\"><a href=\"#lombok\" class=\"headerlink\" title=\"lombok\"></a>lombok</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Lombok是一个实用的Java类库，能通过注解的形式自动生成构造器、getter&#x2F;setter、equals、hashcode、toString等方法，并可以自动化生成日志变量，简化java开发、提高效率。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">注解</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">@Getter&#x2F;@Setter</td>\n<td align=\"left\">为所有的属性提供get&#x2F;set方法</td>\n</tr>\n<tr>\n<td align=\"left\">@ToString</td>\n<td align=\"left\">会给类自动生成易阅读的toString方法</td>\n</tr>\n<tr>\n<td align=\"left\">@EqualsAndHashode</td>\n<td align=\"left\">根据类所拥有的非静态字段自动重写equals方法和 hashCode方法</td>\n</tr>\n<tr>\n<td align=\"left\">@Data</td>\n<td align=\"left\">提供了更综合的生成代码功能 <strong>(@Getter +@Setter +@Tostring +@EqualsAndHashCode)</strong></td>\n</tr>\n<tr>\n<td align=\"left\">@NoArgsConstructor</td>\n<td align=\"left\">为实体类生成无参的构造器方法</td>\n</tr>\n<tr>\n<td align=\"left\">@AllArgsConstructor</td>\n<td align=\"left\">为实体类生成除了static修饰的字段之外带有各参数的构造器方法。</td>\n</tr>\n</tbody></table>\n",
            "tags": [
                "JAVA",
                "JAVASE"
            ]
        }
    ]
}