{
    "version": "https://jsonfeed.org/version/1",
    "title": "Luk's Blog • All posts by \"c语言\" category",
    "description": "",
    "home_page_url": "https://Meteora233.github.io",
    "items": [
        {
            "id": "https://meteora233.github.io/2024/03/01/computer-science/%E4%B8%93%E5%8D%87%E6%9C%AC%E9%94%99%E9%A2%98%E6%95%B4%E7%90%86/c/",
            "url": "https://meteora233.github.io/2024/03/01/computer-science/%E4%B8%93%E5%8D%87%E6%9C%AC%E9%94%99%E9%A2%98%E6%95%B4%E7%90%86/c/",
            "title": "C语言专升本错题整理",
            "date_published": "2024-02-29T16:00:00.000Z",
            "content_html": "<h1 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h1><h2 id=\"数组指针-行指针\"><a href=\"#数组指针-行指针\" class=\"headerlink\" title=\"数组指针(行指针)\"></a>数组指针(行指针)</h2><p>本质是一个指针，这个指针指向一个数组，如下定义了一个指向数组的指针。这里的[3]可以理解为是，定死了指向的数组大小</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> (*p)[<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"comment\">// p is pointer to array of 3 int </span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 数组指针</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printPointerToArray</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a[<span class=\"number\">2</span>][<span class=\"number\">3</span>] = &#123;</span><br><span class=\"line\">\t   &#123;<span class=\"number\">123</span>, <span class=\"number\">43</span>, <span class=\"number\">23</span>&#125;,</span><br><span class=\"line\">\t   &#123;<span class=\"number\">231</span>, <span class=\"number\">123</span>, <span class=\"number\">43</span>&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*q)[<span class=\"number\">3</span>] = a;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\tp-&gt;  &#123;123, 43, 23&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\tp++-&gt;&#123; 231, 123, 43 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;0,0,0&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 需要先解引用</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, *(*q + i * <span class=\"number\">3</span> + j));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>含义</th>\n<th>等价形式</th>\n<th>类型</th>\n<th>数组元素</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>首行</td>\n<td>a[0]、q[0]、* q</td>\n<td>int[3]</td>\n<td>{1, 2, 3}</td>\n<td>0x19AFFC40</td>\n</tr>\n<tr>\n<td>首行的地址</td>\n<td>&amp; a[0]、a、 &amp; q[0]、q</td>\n<td>int(*)[3]</td>\n<td></td>\n<td>0x19AFFC40</td>\n</tr>\n<tr>\n<td>第i行</td>\n<td>a[i]、q[i]、 * (q + i)</td>\n<td>int[3]</td>\n<td>{4, 5, 6} (i &#x3D; 1)</td>\n<td>0x19AFFC4C (i &#x3D; 1)</td>\n</tr>\n<tr>\n<td>第i行的地址</td>\n<td>&amp; a[i]、 &amp; q[i]、q + i</td>\n<td>int(*)[3]</td>\n<td></td>\n<td>0x19AFFC4C (i &#x3D; 1)</td>\n</tr>\n</tbody></table>\n<h3 id=\"转换\"><a href=\"#转换\" class=\"headerlink\" title=\"转换\"></a>转换</h3><p>两个重要概念：行指针和列指针。<br>行指针：指的是一整行，不指向具体元素。<br>列指针：指的是一行中某个具体元素。</p>\n<p>可以将列指针理解为行指针的具体元素，行指针理解为列指针的地址。<br>那么两个概念之间的具体转换是：<br>*行指针—-列指针<br>&amp;列指针—-行指针</p>\n<h2 id=\"指针数组\"><a href=\"#指针数组\" class=\"headerlink\" title=\"指针数组\"></a>指针数组</h2><p>在c中[] 的优先级大于*,所以先计算p[3],是一个数组，而 把int* 放一起看作为一个类型，是一个整形指针，说明这是一个存放整形指针的数组。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *p[<span class=\"number\">3</span>]; </span><br><span class=\"line\">    <span class=\"comment\">// p is array of 3 pointer to int </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><ol>\n<li>结构体名: 用户自己构造的结构体类型</li>\n<li>成员：可以是基本类型，或已经创建好的类型<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">// struct 结构体名&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//类型名称 成员名称;</span></span><br><span class=\"line\">\t<span class=\"comment\">//类型名称 成员名称;</span></span><br><span class=\"line\">\t<span class=\"comment\">//类型名称 成员名称;</span></span><br><span class=\"line\">\t<span class=\"comment\">// ....</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;变量名,变量名 </span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"结构体变量定义\"><a href=\"#结构体变量定义\" class=\"headerlink\" title=\"结构体变量定义\"></a>结构体变量定义</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">   \t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">date</span></span></span><br><span class=\"line\"><span class=\"class\">\t&#123;</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> month;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> day;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span>  <span class=\"title\">stu</span></span></span><br><span class=\"line\"><span class=\"class\">\t&#123;</span></span><br><span class=\"line\">\t\t<span class=\"type\">char</span> nums[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t\t<span class=\"type\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\">\t\t<span class=\"type\">char</span> sex;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">date</span> <span class=\"title\">birdthday</span>;</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义方式</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stu</span> <span class=\"title\">boy</span>, <span class=\"title\">girl</span>;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"存储变量\"><a href=\"#存储变量\" class=\"headerlink\" title=\"存储变量\"></a>存储变量</h2><p>计算机要求所有的存放都要从偶数开始，会直接多开内存</p>\n<h2 id=\"结构体成员的引用\"><a href=\"#结构体成员的引用\" class=\"headerlink\" title=\"结构体成员的引用\"></a>结构体成员的引用</h2><ol>\n<li>结构体变量名.成员名   .被称为成员运算符</li>\n</ol>\n<h1 id=\"类型定义符-typedef\"><a href=\"#类型定义符-typedef\" class=\"headerlink\" title=\"类型定义符 typedef\"></a>类型定义符 typedef</h1><p>作用：为已有的数据类型取别名</p>\n<h2 id=\"用typedef为结构体类型取别名\"><a href=\"#用typedef为结构体类型取别名\" class=\"headerlink\" title=\"用typedef为结构体类型取别名\"></a>用typedef为结构体类型取别名</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// typedef 原类型名 新类型名;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stu</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> nums[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span> sex;</span><br><span class=\"line\">&#125;STU;</span><br><span class=\"line\">STU boy1,boy2;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>只是为了已有数据类型取了名字，没有构成新的数据类型。只是用为了编码方便。</p>\n<h2 id=\"结构体指针\"><a href=\"#结构体指针\" class=\"headerlink\" title=\"结构体指针\"></a>结构体指针</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// （*结构体变量指针变量).成员名</span></span><br><span class=\"line\">(*pstu).num  括号不能少</span><br><span class=\"line\"><span class=\"comment\">// 结构体指针变量-&gt; 成员名  -&gt;为指向运算符</span></span><br><span class=\"line\">pstu-&gt;name;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stu</span> <span class=\"title\">boy</span>[5],*<span class=\"title\">ps</span>;</span></span><br><span class=\"line\">   ps=boy;</span><br><span class=\"line\">  <span class=\"comment\">// ps-&gt;num 与boy[0].num 等效</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"结构体与函数\"><a href=\"#结构体与函数\" class=\"headerlink\" title=\"结构体与函数\"></a>结构体与函数</h2><ol>\n<li>结构体作函数参数的形式有两种:</li>\n</ol>\n<ul>\n<li>结构体变量作函数参数，是<strong>值传递</strong>，执行效率低。如: void Print1( struct stu s ); （传递副本）</li>\n<li>结构体指针变量作函数参数，是<strong>地址传递</strong>，可以减少结构体数据向函数传递时引起的时间和空间开销。 （无需传递副本）</li>\n</ul>\n<h2 id=\"动态内存管理\"><a href=\"#动态内存管理\" class=\"headerlink\" title=\"动态内存管理\"></a>动态内存管理</h2><p>C语言标准库提供了四个函数用于动态内存管理</p>\n<ol>\n<li>malloc():分配新的内存空间，但不对内存空间进行初始化</li>\n<li>calloc():分配新的内存空间，并对内存空间进行清零</li>\n<li>realloc():调整已分配的内存空间大小</li>\n<li>free():释放已分配的内存空间</li>\n</ol>\n<p>#include&lt;stdlib.h&gt;<br>动态内存管理函数都声明在头文件&lt;stdlib.h&gt;中，</p>\n<h3 id=\"malloc-函数\"><a href=\"#malloc-函数\" class=\"headerlink\" title=\"malloc()函数\"></a>malloc()函数</h3><p>函数的原型:<br>void *malloc( unsigned int size );</p>\n<blockquote>\n<p>功能:申请分配一块大小为size字节的内存空间&gt;返回值:若分配成功，则返回分配到的内存空间首地址，该地址类型为“void <em>”类型，即不确定的指针类型;若分配失败，返回NULL。<br>调用形式:(类型说明符</em>)malloc( size );</p>\n</blockquote>\n<h3 id=\"calloc\"><a href=\"#calloc\" class=\"headerlink\" title=\"calloc()\"></a>calloc()</h3><p>函数函数的原型为:<br>void *calloc(unsigned int n , unsigned int size );</p>\n<blockquote>\n<p>功能:申请连续的n块内存空间，每块大小为size字节<br>返回值:若申请成功，则返回申请到的内存空间首地址，该地址类型为“void <em>”类型;若申请失败，返回NULL。<br>调用形式:(类型说明符</em>)calloc( n, size );</p>\n</blockquote>\n<h3 id=\"free\"><a href=\"#free\" class=\"headerlink\" title=\"free()\"></a>free()</h3><p>函数函数的原型:<br>void free( void *ptr);</p>\n<blockquote>\n<p>函数的调用形式:<br>free(ptr);<br>功能:释放指针变量ptr所指向的内存空间<br>注意: free()释放的内存空间是由malloc()或calloc()函数分配</p>\n</blockquote>\n<h3 id=\"realloc-函数\"><a href=\"#realloc-函数\" class=\"headerlink\" title=\"realloc()函数\"></a>realloc()函数</h3><p>函数的原型为:<br>void *realloc( void *ptr, unsigned int size );</p>\n<blockquote>\n<p>函数的调用形式: realloc(ptr,size);<br>功能:释放ptr所指向的内存空间，并分配大小为size字节的新内存区域,并返回该地址。新内存块size可以比原来分配的空间大或小。<br>增大内存空间，原来内存块中的数据不会改变<br>如果第一个参数为空指针,realloc()就被当作malloc()使用</p>\n</blockquote>\n<h2 id=\"共用体\"><a href=\"#共用体\" class=\"headerlink\" title=\"共用体\"></a>共用体</h2><h3 id=\"什么是共用体\"><a href=\"#什么是共用体\" class=\"headerlink\" title=\"什么是共用体\"></a>什么是共用体</h3><ol>\n<li>与结构体的不同类型定义关键字不同</li>\n<li>所占内存空间不同，共用体所占空间取决于所有成员中占内存空间最多的那个成员</li>\n<li>同一时刻，共用体的空间只能被一个 成员使用<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   d.num = <span class=\"number\">1</span>;  </span><br><span class=\"line\">d.sc = <span class=\"number\">2323.32</span>;   <span class=\"comment\">//最后一条语句生效</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, d.num);  </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lf&quot;</span>, d.sc);  </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"number\">-687194767</span></span><br><span class=\"line\">   <span class=\"number\">2323.320000</span> <span class=\"comment\">// 只有这个生效</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><blockquote>\n<p>不能把共用体变量作为参数，也不能从函数带回共用体变量<br>结构体类型可与共用体类型互相引用</p>\n</blockquote>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h1 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h1><h1 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h1>",
            "tags": []
        },
        {
            "id": "https://meteora233.github.io/2024/03/01/computer-science/%E4%B8%93%E5%8D%87%E6%9C%AC%E9%94%99%E9%A2%98%E6%95%B4%E7%90%86/c%E8%AF%AD%E8%A8%80%E9%94%99%E9%A2%98/",
            "url": "https://meteora233.github.io/2024/03/01/computer-science/%E4%B8%93%E5%8D%87%E6%9C%AC%E9%94%99%E9%A2%98%E6%95%B4%E7%90%86/c%E8%AF%AD%E8%A8%80%E9%94%99%E9%A2%98/",
            "title": "C语言错题整理",
            "date_published": "2024-02-29T16:00:00.000Z",
            "content_html": "<h1 id=\"选择题\"><a href=\"#选择题\" class=\"headerlink\" title=\"选择题\"></a>选择题</h1><ol>\n<li><p>以下程序的输出结果是（ ）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\">  main( )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>, c = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(“%d”, c&gt;b&gt;a);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">A) <span class=\"number\">2</span> B) <span class=\"number\">1</span>  C) <span class=\"number\">0</span> D) <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>解析答案:表达式 c &gt; b &gt; a 在 C 语言中的求值顺序是从左到右。它首先比较 c 和 b 的值，即判断 3&gt; 2，这个表达式的结果为真，即值为 1.<br>然后，它将 1（真）与 a 的值进行比较，即判断 1 &gt; 1，这个表达式的结果为假，即值为 0。因此，整个表达式的结果为 0。这是因为在 C 语言中，关系运算符的结果是一个布尔值，即真（非零值）或假（0）。在这个表达式中，第一个比较结果为真，但第二个比较结果为假，所以最终结果为假，即 0。     </p>\n</blockquote>\n</li>\n<li><p>有以下程序段</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main( )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"type\">int</span> k=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(k=<span class=\"number\">1</span>) k++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">则 <span class=\"keyword\">while</span> 循环执行的次数是（） 选择C</span><br><span class=\"line\">A) 无限次 B) 有语法错，不能执行 C) 一次也不执行 D) 执行 <span class=\"number\">1</span> 次</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> 解析：因为在条件语句 while(k&#x3D;1) 中使用了赋值操作符 &#x3D; 而不是比较操作符 &#x3D;&#x3D;。赋值操作符将 k 的值设为 1，并返回赋值后的值，因此条件始终为真，<strong>循环将无限执行下去</strong>。</p>\n</blockquote>\n</li>\n<li><p>以下 4 个选项中，不能作为一条 C 语句的是( )。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A) &#123;;&#125; B) a=<span class=\"number\">0</span>,b=<span class=\"number\">0</span>,c=<span class=\"number\">0</span>;C) <span class=\"keyword\">if</span>(a&gt;<span class=\"number\">0</span>); D) <span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>) m=<span class=\"number\">1</span>;n=<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>解析：D选项是两条语句</p>\n</blockquote>\n</li>\n<li><p>有以下定义语句 double a,b; int w; long c;<br>若各变量已正确赋值，则下列选项中正确的表达式是( )。<br>A) a&#x3D;a+b&#x3D;b++ B) w%(int)a+b) C) (c+w)%(int)a D) w&#x3D;a&#x3D;&#x3D;b;</p>\n<blockquote>\n<p>解析：A.赋值号左边只能是变量，不能是表达式B，取模运算的数据只能是整型，a强制转换成整型，但b为实型，整型加实型为实型</p>\n</blockquote>\n</li>\n<li><p>在一个文件中定义的全局变量的作用域为<br>A.本程序的全部范围； B.本文件的全部范围；<br>C.函数内的全部范围； D.从定义该变量的位置开始到文件结束。</p>\n<blockquote>\n<p>解析:D,</p>\n</blockquote>\n</li>\n<li><p>若有以下定义和语句</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a=<span class=\"number\">3</span>,b=<span class=\"number\">4</span>, *q,*w,*p；</span><br><span class=\"line\">p=&amp;a； q=&amp;b； w=q； q=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">则以下选项中错误的语句是 。</span><br><span class=\"line\">A *p=a； B w=p； C *q=<span class=\"number\">0</span>； D *p=*w；</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>解析：C，这是一个错误的语句。在之前的代码中，已经将指针 q 设置为 NULL，也就是空指针。因此，尝试通过空指针 q 来赋值是不合法的。</p>\n</blockquote>\n</li>\n<li><p>若调用一个函数，且此函数中没有 return 语句，则正确的说法是：该函数()。<br>A．没有返回值   B．返回若干个系统默认值<br>C．能返回一个用户所希望的函数值   D．返回一个不确定的值  </p>\n<blockquote>\n<p>解析:D,我们C语言程序设计教科书上的原话：函数调用完成后，通过return语句返回函数值，若无该语句将返回不确定值，若函数类型定义为void（空）类型，该函数将没有返回值。</p>\n</blockquote>\n</li>\n<li><p>下列程序的输出结果为 。</p>\n</li>\n</ol>\n<p>#define SQR(x) x*x</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SQR(x) x*x</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123; <span class=\"type\">int</span> a=<span class=\"number\">10</span>, k=<span class=\"number\">2</span>, m=<span class=\"number\">1</span>;</span><br><span class=\"line\">a/=SQR(k+m);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(“%d\\n”, a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">A. <span class=\"number\">1</span> B. <span class=\"number\">8</span> C. <span class=\"number\">2</span> D. <span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>解析：C，a &#x2F;&#x3D; SQR(k + m);  展开后：a &#x2F;&#x3D; k + m * k + m;   &#x3D;&gt;a &#x2F;&#x3D; 2 + 1 * 2 + 1;<br>a &#x2F;&#x3D; 2 + 2 + 1;<br>a &#x2F;&#x3D; 5;</p>\n</blockquote>\n<ol start=\"9\">\n<li><p>已知 static int a[ ]&#x3D;{5，4，3，2，1}，*p[ ]&#x3D;{a+3，a+2，a+1，a},**q&#x3D;p；则表达式：<br>*(p[0]+1) + **(q +2 ) 的值是();<br>A．5 B．4 C．6 D．7</p>\n<blockquote>\n<p>解析：表达式 *(p[0]+1) + **(q+2) 可以分解为以下步骤：<br>p[0] 是指针数组 p 的第一个元素，即 a+3。因此，*(p[0]+1) 等价于 *(a+3+1)，也就是 *(a+4)。<br>**(q+2) 等价于 <em>(</em>(p+2))，也就是 *(a+1)。</p>\n</blockquote>\n</li>\n<li><p>用 C 语言编写的代码程序()<br>A)可立即执行 B)是一个源程序 C)经过编译即可执行 D)经过编译解释才能执行</p>\n<blockquote>\n<p>解析：B</p>\n</blockquote>\n</li>\n<li><p>在函数调用过程中，如果函数 funA 调用了函数 funB,函数 funB 又调用了函数 funA， 则 （ ）<br>A)称为函数的直接递归调用\tB)称为函数的间接递归调用<br>C)称为函数的循环调用\tD)C 语言中不允许这样的递归调用</p>\n<blockquote>\n<p>解析：B</p>\n</blockquote>\n</li>\n<li><p>16.下列叙述中正确的是(d)<br>A）C 语言中既有逻辑类型也有集合类型 B）C 语言中没有逻辑类型但有集合类型C）C 语言中有逻辑类型但没有集合类型 D）C 语言中既没有逻辑类型也没有集合类型</p>\n<blockquote>\n<p>在给定的选项中，正确的叙述是 D）C语言中既没有逻辑类型也没有集合类型。</p>\n</blockquote>\n</li>\n</ol>\n<p>C语言中没有内置的逻辑类型和集合类型。它主要提供了基本的数据类型（如整型、字符型、浮点型等）和操作这些数据类型的运算符。逻辑运算可以通过使用整型来模拟，通常使用0表示假（false）和非零值表示真（true）。</p>\n<p>集合类型（如数组、结构体等）可以通过C语言中的数据结构来实现，但它们不是内置的语言类型。开发者可以使用数组来表示集合，或者使用结构体来组织相关的数据项。然而，C语言本身并没有提供专门的集合类型。</p>\n<p>因此，选项 D）C语言中既没有逻辑类型也没有集合类型是正确的叙述。</p>\n<ol start=\"13\">\n<li>以下选项中可作为 C 语言合法整数的是（）<br>A）1010B\tB）0287\t\tC）0x02h3\tD）0x0ffa</li>\n</ol>\n<blockquote>\n<p>答案：D<br>1.八进制：以0开头，数的每一位都不能大于7；<br>2.十进制：普通整数均为十进制，每一位都不能大于9；<br>3.十六进制：以0x或0X开头，每一位都不能大于F。  </p>\n</blockquote>\n<ol start=\"14\">\n<li>在给定的选项中，不属于C语言关键字的是 (D)<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A) default B) register C) enum D) external</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>A) default：是C语言的关键字，用于指定switch语句中的默认情况。<br>B) register：是C语言的关键字，用于声明寄存器变量，但在现代编译器中，register关键字已经不再具有实际意义，因此很少使用。<br>C) enum：是C语言的关键字，用于定义枚举类型。<br>D) external：不是C语言的关键字。它是一个存储类说明符，用于指定全局变量或函数的存储和链接属性。 </p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 填空题</span><br><span class=\"line\">1. C 程序的基本组成单位是 **函数**</span><br><span class=\"line\"></span><br><span class=\"line\">2. C 语言提供了 **#include** 命令用来实现“文件包含”的操作。</span><br><span class=\"line\"></span><br><span class=\"line\">3. 实常数 123.457 的规范化指数表示形式是 是什么?</span><br><span class=\"line\">&gt; 实常数 123.457 的科学计数法表示形式是 1.23457e2。其中，e2 表示 10 的指数幂，即 10^2，与前面提到的规范化指数表示形式 1.23457 × 10^2 是等价的。</span><br><span class=\"line\"></span><br><span class=\"line\">4.</span><br><span class=\"line\">``` c</span><br><span class=\"line\"> int x=1,y=2,z=3;</span><br><span class=\"line\"> printf(“%d”,(z+=x+y, y=z, x=z+y));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>逗号表达式的值为最后一个表达式的值， z&#x3D;z+x+y&#x3D;3+2+1&#x3D;6  y&#x3D;6 x&#x3D;6+6&#x3D;12<br>答案:12</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"计算题\"><a href=\"#计算题\" class=\"headerlink\" title=\"计算题\"></a>计算题</h1><p>设 int a&#x3D;12，求出表达式 a+&#x3D;a-&#x3D;a*a 运算后 a 的值.</p>\n<blockquote>\n<p>a-&#x3D;a<em>a  a&#x3D;a-a</em>a a&#x3D;12-144&#x3D; -132<br>a+&#x3D;-132 a&#x3D;a+(-132) a&#x3D;-132-132&#x3D; -264</p>\n</blockquote>\n<h1 id=\"文件错题\"><a href=\"#文件错题\" class=\"headerlink\" title=\"文件错题\"></a>文件错题</h1><ol>\n<li>如果要将存放在双精度型数组x[10]中的10个数据写到文件指针所指向的文件中，正确的语句是（C）。</li>\n</ol>\n<p>A．for(i&#x3D;0;i&lt;10;i++)   fputc(x[i],fp); </p>\n<p>B．for(i&#x3D;0;i&lt;10;i++)   fputc(&amp;x[i],fp);</p>\n<p>C．for(i&#x3D;0;i&lt;10;i++)   fwrite(&amp;x[i],8,1,fp);</p>\n<p>D．fwrite(fp,8,10,x);</p>\n<blockquote>\n<p>解析：<br>A错误原因: fputc 函数用于写入一个字符到文件中，而 x[i] 是双精度型数组，不是字符类型。因此，这个语句会导致类型不匹配的错误。</p>\n</blockquote>\n<ol start=\"2\">\n<li>5．下列程序的运行结果为  b  。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">    FILE *fp;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"type\">char</span> t,str[]=<span class=\"string\">&quot;abcd&quot;</span>;</span><br><span class=\"line\">    fp=fopen(<span class=\"string\">&quot;abc.dat&quot;</span>,<span class=\"string\">&quot;wb+&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)</span><br><span class=\"line\">    fwrite(&amp;str[i],<span class=\"number\">1</span>,<span class=\"number\">1</span>,fp);</span><br><span class=\"line\">    fseek(fp,<span class=\"number\">-3L</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    fread(&amp;t,<span class=\"number\">1</span>,<span class=\"number\">1</span>,fp);</span><br><span class=\"line\">    fclose(fp);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c\\n&quot;</span>,t);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n fseek(文件指针,位移量,起始点) &#x2F;&#x2F;位移量由字节数表示,大于0表示从文件头部向文件尾的方向记字节数 要求位移量是long长整型数据起点用数字表示  成功返回0 否则返回非0</li>\n</ol>\n<p> 起始点位置安排:</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>位置</th>\n<th>对应</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>文件首</td>\n<td>SEEK_SET</td>\n</tr>\n<tr>\n<td>1</td>\n<td>当前位置</td>\n<td>SEEK_CUR</td>\n</tr>\n<tr>\n<td>2</td>\n<td>文件尾</td>\n<td>SEEK_END</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>例子<br>fseek(fp,10L,0) -&gt; 将文件位置指针从文件首向前移动10B<br>fseek(fp,10L,1) -&gt; 将文件位置指针从当前位置向前移动10B<br>fseek(fp,-10L,1) -&gt; 将文件位置指针从当前位置向后移动10B<br>fseek(fp,-10L,2) -&gt; 将文件位置指针从文件尾向后移动10B  </p>\n</blockquote>\n",
            "tags": []
        }
    ]
}