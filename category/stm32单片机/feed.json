{
    "version": "https://jsonfeed.org/version/1",
    "title": "Luk's Blog • All posts by \"stm32单片机\" category",
    "description": "",
    "home_page_url": "https://Meteora233.github.io",
    "items": [
        {
            "id": "https://meteora233.github.io/2025/01/31/Electronic-information/STM32/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/",
            "url": "https://meteora233.github.io/2025/01/31/Electronic-information/STM32/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/",
            "title": "STM32单片机环境配置",
            "date_published": "2025-01-30T16:00:00.000Z",
            "content_html": "<p>note info:<br>第一天学习 课程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXRoNDExejdzbi8/c3BtX2lkX2Zyb209MzMzLjEzOTEuMC4wJnA9NCZ2ZF9zb3VyY2U9ZWU3NjBiZjdhNGQ4OWQzZWU5MmY0ZjgzZjNhNjgyYzk=\">STM32标准库</span>  </p>\n<h1 id=\"新建工程\"><a href=\"#新建工程\" class=\"headerlink\" title=\"新建工程\"></a>新建工程</h1><h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li>创建项目Project-&gt;new Project ,选择STM32F103<br><img data-src=\"https://s21.ax1x.com/2025/01/31/pEZSYT0.png\" alt=\"选择芯片型号\"></li>\n<li>创建启动库文件</li>\n</ol>\n<ul>\n<li>stm32启动文件<br>stm32f10x.h 就是stm32的外设寄存器描述文件，作用和51单片机的头文件REGX52.H 一样，用来描述stm32有哪些寄存器和它对应的地址两个system是用来配置时钟，stm32主频72MHz,也就是system函数配置的<br>文件目录:固件库\\STM32F10x_StdPeriph_Lib_V3.5.0\\Libraries\\CMSIS\\CM3\\DeviceSupport\\ST\\STM32F10x</li>\n<li>core文件<br>因为stm32是内核和内核外围的设备组成的，而且这个内核的寄存器描述和外围设备的描述文件不在一起，需要添加一个内核寄存器的描述文件两个cm3 core是内核的寄存器描述文件，还含带了一些内核的配置函数，所以多了个.c文件<br>文件目录:固件库\\STM32F10x_StdPeriph_Lib_V3.5.0\\Libraries\\CMSIS\\CM3\\CoreSupport</li>\n</ul>\n<ol start=\"3\">\n<li><p>在项目文件夹下创建一个Start文件夹，将上述的启动的文件复制进去<br><a href=\"https://imgse.com/i/pEZSX9S\"><img data-src=\"https://s21.ax1x.com/2025/01/31/pEZSX9S.png\" alt=\"Start文件夹\"></a></p>\n</li>\n<li><p>在Keil软件内，将Source Group1的名称修改为Start<br><a href=\"https://imgse.com/i/pEZp97q\"><img data-src=\"https://s21.ax1x.com/2025/01/31/pEZp97q.png\" alt=\"修改名称.png\"></a></p>\n</li>\n<li><p>将启动文件、.c、.h文件添加到start文件夹<br><a href=\"https://imgse.com/i/pEZpPA0\"><img data-src=\"https://s21.ax1x.com/2025/01/31/pEZpPA0.png\" alt=\"添加文件.png\"></a></p>\n</li>\n<li><p>添加头文件路径<br><a href=\"https://imgse.com/i/pEZpQN6\"><img data-src=\"https://s21.ax1x.com/2025/01/31/pEZpQN6.png\" alt=\"添加头文件路径\"></a></p>\n</li>\n<li><p>创建main文件<br><a href=\"https://imgse.com/i/pEZptud\"><img data-src=\"https://s21.ax1x.com/2025/01/31/pEZptud.png\" alt=\"创建main文件\"></a></p>\n</li>\n<li><p>编写main文件<br><a href=\"https://imgse.com/i/pEZph5V\"><img data-src=\"https://s21.ax1x.com/2025/01/31/pEZph5V.png\" alt=\"pEZph5V.png\"></a></p>\n</li>\n</ol>\n<h1 id=\"寄存器点灯\"><a href=\"#寄存器点灯\" class=\"headerlink\" title=\"寄存器点灯\"></a>寄存器点灯</h1><h2 id=\"RCC寄存器\"><a href=\"#RCC寄存器\" class=\"headerlink\" title=\"RCC寄存器\"></a>RCC寄存器</h2><ol>\n<li>打开stm32的参考手册，首先是一个RCC的寄存器，来使能GPIOC时钟，GPIO都是APB2的外设，所以在这个APB2外设时钟使能寄存器RCC_APB2ENR里面配置，</li>\n<li>打开说明有个IOPCEN ，这一位就是使能GPIOC时钟的，</li>\n</ol>\n<ul>\n<li>IOPCEN：IO端口C时钟使能 (I&#x2F;O port C clock enable) </li>\n<li>由软件置’1’或清’0’ </li>\n<li>0：IO端口C时钟关闭；</li>\n<li>1：IO端口C时钟开启。 &#x2F;&#x2F;这一位写1就是打开GPIOC的时钟</li>\n</ul>\n<ol start=\"3\">\n<li>代码实现：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"PC13口的模式\"><a href=\"#PC13口的模式\" class=\"headerlink\" title=\"PC13口的模式\"></a>PC13口的模式</h2><ul>\n<li>手册中的8.2.2</li>\n</ul>\n<ol>\n<li>CNF13 和Mode13就是用来配置13号口的</li>\n<li>CNFy,CNF需要配置为00：通用推挽输出模式</li>\n<li>Mode需要配置为11：输出模式，最搭速度为50MHz</li>\n</ol>\n<h2 id=\"端口输出数据寄存器GPIOx-ODR\"><a href=\"#端口输出数据寄存器GPIOx-ODR\" class=\"headerlink\" title=\"端口输出数据寄存器GPIOx_ODR\"></a>端口输出数据寄存器GPIOx_ODR</h2><ul>\n<li>手册中的8.2.4</li>\n</ul>\n<ol>\n<li>中间有一位ODR13，这一位写1，13号口就是高电平，写0就是低电平</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span>                  <span class=\"comment\">// Device header</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">  RCC-&gt;APB2ENR=<span class=\"number\">0x00000010</span>;</span><br><span class=\"line\">  GPIOC-&gt;CRH=<span class=\"number\">0x00300000</span>;</span><br><span class=\"line\">  <span class=\"comment\">//GPIOC-&gt;ODR=0x00000000; // 因为这个灯是低电平点亮的，所以我们给ODR全0就是亮，ODR2000就是灭</span></span><br><span class=\"line\"></span><br><span class=\"line\">  GPIOC-&gt;ODR=<span class=\"number\">0x00002000</span>; <span class=\"comment\">// 因为这个灯是低电平点亮的，所以我们给ODR全0就是亮，ODR2000就是灭</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以看出这种方式需要不断的地查手册来了解每个寄存器的每一位的作用，这个操作也有一个弊端，比如我们把除了PC13之外的所有位都配置成了0，这样会影响到其他端口的原有配置，如果要只做到配置PC13而不影响其他位，那还需要&amp;&#x3D;和|&#x3D;的操作。所以这种寄存器的方式虽然代码简洁，但还是不大方便</li>\n</ul>\n<h1 id=\"库函数调用方式\"><a href=\"#库函数调用方式\" class=\"headerlink\" title=\"库函数调用方式\"></a>库函数调用方式</h1><h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ol>\n<li><p>为工程添加库函数</p>\n<blockquote>\n<p>在工程目录下创建Library文件夹，用来存放库函数</p>\n</blockquote>\n</li>\n<li><p>打开固件库<em>STM32F10x_StdPeriph_Lib_V3.5.0\\Libraries\\STM32F10x_StdPeriph_Driver\\src”<em>和</em>STM32F10x_StdPeriph_Driver\\inc</em>将其中的文件都复制到Library文件夹中</p>\n<blockquote>\n<p>其中misc.c 是内核的库函数，其他的是内核外的库函数</p>\n</blockquote>\n</li>\n<li><p>回到keil软件，创建右击Target,创建Group,名为:Library,然后添加现有项,选择Library文件夹中所有的文件</p>\n</li>\n<li><p>将这三个文件复制到工程目录的User文件夹下，然后对keil软件内的User添加现有项，将这三个文件添加进来</p>\n<blockquote>\n<p><em>固件库\\STM32F10x_StdPeriph_Lib_V3.5.0\\Project\\STM32F10x_StdPeriph_Template</em> 目录下</p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>stm32f10x_conf.h</td>\n<td>用来配置库函数头文件的包含关系、然后这里面还有个用来检查参数检查的函数定义的</td>\n</tr>\n<tr>\n<td>stm32f10x_it.c、stm32f10x_it.h</td>\n<td>用来存放中断函数的</td>\n</tr>\n</tbody></table>\n</blockquote>\n</li>\n<li><p>点击魔法棒内-&gt; C&#x2F;C++，define 输入USE_STDPERIPH_DRIVER</p>\n<blockquote>\n<p>因为stm32f10x.h内有这么一段语句，所以要先存在这个字符串，下面的include 才有效</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> USE_STDPERIPH_DRIVER</span></span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_conf.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure></li>\n<li><p>同时把include Path中的User路径和Library路径都选择上</p>\n</li>\n<li><p>这样我们基于库函数的工程文件就创建好了<br>创建完成后如下图:<br><a href=\"https://imgse.com/i/pEZEeTH\"><img data-src=\"https://s21.ax1x.com/2025/01/31/pEZEeTH.png\" alt=\"pEZEeTH.png\"></a></p>\n</li>\n</ol>\n<h1 id=\"使用库文件进行点灯\"><a href=\"#使用库文件进行点灯\" class=\"headerlink\" title=\"使用库文件进行点灯\"></a>使用库文件进行点灯</h1><blockquote>\n<p>库函数也是间接的配置寄存器，所以步骤一致</p>\n</blockquote>\n<ol>\n<li>首先是使能时钟， 那库函数有这么一个函数（<strong>RCC_APB2PeriphClockCmd</strong>）来开启时钟</li>\n</ol>\n",
            "tags": []
        }
    ]
}